[{"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\index.tsx":"1","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\App.tsx":"2","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\RegisterForm.tsx":"3","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\store.ts":"4","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\rootReducer.ts":"5","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\layoutReducer.ts":"6","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\layoutActionTypes.ts":"7","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\interfaces\\index.ts":"8","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\layout\\Layout.tsx":"9","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\NavBar.tsx":"10","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\layoutActions.ts":"11","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\helper\\index.ts":"12","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\userActionTypes.ts":"13","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\userActions.ts":"14","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\interfaces\\layout.ts":"15","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\LoginForm.tsx":"16","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\userReducer.ts":"17","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\routes\\Routes.tsx":"18","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\routes\\PrivateRoute.tsx":"19","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\layout\\Dashboard.tsx":"20","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\SideNavLeft.tsx":"21","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\SideNavRight.tsx":"22","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\Posts.tsx":"23","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\Post.tsx":"24","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\comment\\Comments.tsx":"25","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\comment\\Comment.tsx":"26","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\answer\\Answers.tsx":"27","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\answer\\Answer.tsx":"28","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreatePost.tsx":"29","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\profileReducer.ts":"30","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\profileActionTypes.ts":"31","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\profileActions.ts":"32","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\postReducer.ts":"33","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\postActionTypes.ts":"34","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\postActions.ts":"35","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreateComment.tsx":"36","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreateAnswer.tsx":"37","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\SearchProfile.tsx":"38","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\Profile.tsx":"39","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\SearchedProfileResults.tsx":"40","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\SearchResult.tsx":"41","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\RequestButton.tsx":"42","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\notification\\Notifications.tsx":"43","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\notification\\Notification.tsx":"44","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\messages\\Conversation.tsx":"45","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\conversationReducer.ts":"46","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\conversationTypes.ts":"47","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\conversationActions.ts":"48","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\FriendListItem.tsx":"49","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\messages\\Messages.tsx":"50","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\messages\\ConversationMessage.tsx":"51","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\messages\\Message.tsx":"52","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\ProfileImages.tsx":"53","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\UpdateProfileImage.tsx":"54","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\ProfileHeader.tsx":"55"},{"size":483,"mtime":1613834219448,"results":"56","hashOfConfig":"57"},{"size":665,"mtime":1624625291184,"results":"58","hashOfConfig":"57"},{"size":10759,"mtime":1609624804606,"results":"59","hashOfConfig":"57"},{"size":310,"mtime":1609576083471,"results":"60","hashOfConfig":"57"},{"size":496,"mtime":1622400390997,"results":"61","hashOfConfig":"57"},{"size":2484,"mtime":1617264187079,"results":"62","hashOfConfig":"57"},{"size":538,"mtime":1614009019579,"results":"63","hashOfConfig":"57"},{"size":94,"mtime":1609453140940,"results":"64","hashOfConfig":"65"},{"size":2054,"mtime":1617197066500,"results":"66","hashOfConfig":"57"},{"size":3439,"mtime":1618688109808,"results":"67","hashOfConfig":"57"},{"size":1427,"mtime":1614009116514,"results":"68","hashOfConfig":"57"},{"size":539,"mtime":1617180792068,"results":"69","hashOfConfig":"57"},{"size":152,"mtime":1617263913255,"results":"70","hashOfConfig":"57"},{"size":2380,"mtime":1617265366354,"results":"71","hashOfConfig":"57"},{"size":453,"mtime":1609576513679,"results":"72","hashOfConfig":"65"},{"size":6757,"mtime":1615450690334,"results":"73","hashOfConfig":"57"},{"size":1057,"mtime":1619118075278,"results":"74","hashOfConfig":"57"},{"size":582,"mtime":1617140661569,"results":"75","hashOfConfig":"57"},{"size":466,"mtime":1609625822225,"results":"76","hashOfConfig":"57"},{"size":4405,"mtime":1625207259379,"results":"77","hashOfConfig":"57"},{"size":2683,"mtime":1624623702129,"results":"78","hashOfConfig":"57"},{"size":678,"mtime":1622403397131,"results":"79","hashOfConfig":"57"},{"size":776,"mtime":1622654778824,"results":"80","hashOfConfig":"57"},{"size":6761,"mtime":1629366004628,"results":"81","hashOfConfig":"57"},{"size":460,"mtime":1614009306996,"results":"82","hashOfConfig":"57"},{"size":6168,"mtime":1615475379004,"results":"83","hashOfConfig":"57"},{"size":475,"mtime":1614008724001,"results":"84","hashOfConfig":"57"},{"size":4720,"mtime":1615475406062,"results":"85","hashOfConfig":"57"},{"size":2436,"mtime":1616410635099,"results":"86","hashOfConfig":"57"},{"size":6092,"mtime":1629365551832,"results":"87","hashOfConfig":"57"},{"size":1566,"mtime":1629364988770,"results":"88","hashOfConfig":"57"},{"size":12623,"mtime":1629365365645,"results":"89","hashOfConfig":"57"},{"size":6212,"mtime":1617264175504,"results":"90","hashOfConfig":"57"},{"size":1017,"mtime":1614007164541,"results":"91","hashOfConfig":"57"},{"size":10385,"mtime":1617181119188,"results":"92","hashOfConfig":"57"},{"size":2398,"mtime":1615475303211,"results":"93","hashOfConfig":"57"},{"size":2415,"mtime":1615475314882,"results":"94","hashOfConfig":"57"},{"size":3526,"mtime":1622441776542,"results":"95","hashOfConfig":"57"},{"size":2893,"mtime":1629355432534,"results":"96","hashOfConfig":"57"},{"size":972,"mtime":1618692349675,"results":"97","hashOfConfig":"57"},{"size":1352,"mtime":1618857732954,"results":"98","hashOfConfig":"57"},{"size":3135,"mtime":1618857901398,"results":"99","hashOfConfig":"57"},{"size":1862,"mtime":1622441591794,"results":"100","hashOfConfig":"57"},{"size":2605,"mtime":1621460225007,"results":"101","hashOfConfig":"57"},{"size":13369,"mtime":1627396114069,"results":"102","hashOfConfig":"57"},{"size":3044,"mtime":1627395553151,"results":"103","hashOfConfig":"57"},{"size":631,"mtime":1625218940078,"results":"104","hashOfConfig":"57"},{"size":3651,"mtime":1627394914749,"results":"105","hashOfConfig":"57"},{"size":1961,"mtime":1629365823105,"results":"106","hashOfConfig":"57"},{"size":1492,"mtime":1623159929056,"results":"107","hashOfConfig":"57"},{"size":1568,"mtime":1624624595010,"results":"108","hashOfConfig":"57"},{"size":1466,"mtime":1624622543069,"results":"109","hashOfConfig":"57"},{"size":2983,"mtime":1629364589546,"results":"110","hashOfConfig":"57"},{"size":2394,"mtime":1629365392960,"results":"111","hashOfConfig":"57"},{"size":5844,"mtime":1629356779116,"results":"112","hashOfConfig":"57"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},"j3aqje",{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"115"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},"1v29g66",{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"115"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"115"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"115"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"115"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"115"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"115"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"115"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"115"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"115"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"115"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\index.tsx",[],["236","237"],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\App.tsx",["238"],"import React, {useEffect} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { verifyUser } from './actions/userActions';\nimport NavBar from './components/NavBar';\nimport Routes from './components/routes/Routes';\nimport {ToastContainer} from 'react-toastify'\nimport { State } from './interfaces';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const {user} = useSelector((state: State) => state.user)\n\n  useEffect(() => {\n    dispatch(verifyUser(user.id));\n  }, [])\n\n  return (\n    <React.Fragment>\n      <NavBar/>\n\n      <Routes/>\n\n      <ToastContainer position=\"bottom-right\" />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\RegisterForm.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\store.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\rootReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\layoutReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\layoutActionTypes.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\interfaces\\index.ts",[],["239","240"],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\layout\\Layout.tsx",["241"],"import React, {useEffect} from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport RegisterForm from \"../modals/RegisterForm\";\r\nimport {State} from '../../interfaces'\r\nimport LoginForm from '../modals/LoginForm';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst AuthenticateUser = () => {\r\n    const {formType} = useSelector((state:State) => state.layout);\r\n    const {isAuthenticated} = useSelector((state:State) => state.user);\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if(isAuthenticated){\r\n            history.push(\"/dashboard\");\r\n        }\r\n    }, [isAuthenticated])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container d-flex justify-content-center align-items-center layout-container\">\r\n                <div className=\"img-container\">\r\n                    <img src=\"/assets/illustration.svg\" className=\"img-fluid\" alt=\"Illustration\"/>\r\n                </div>\r\n\r\n                <div className=\"layout-text\">\r\n                    <h1>With Socialize you can</h1>\r\n                    <p className=\"d-flex justify-content-start align-items-center p-2 fs-3\">\r\n                        <span className=\"dot\"></span> Meet new people\r\n                    </p>\r\n                    <p className=\"d-flex justify-content-start align-items-center p-2 fs-3\">\r\n                        <span className=\"dot\"></span> Read others posts\r\n                    </p>\r\n                    <p className=\"d-flex justify-content-start align-items-center p-2 fs-3\">\r\n                        <span className=\"dot\"></span> Upload your own posts\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            {formType && formType === \"register\" && <RegisterForm/>}\r\n\r\n            {formType && formType === \"login\" && <LoginForm/>}\r\n\r\n            <footer className=\"container-fluid d-flex justify-content-start align-items-center px-4 fs-5\">\r\n                <p>Socialize &copy; 2021</p>\r\n            </footer>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default AuthenticateUser\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\NavBar.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\layoutActions.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\helper\\index.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\userActionTypes.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\userActions.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\interfaces\\layout.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\LoginForm.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\userReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\routes\\Routes.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\routes\\PrivateRoute.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\layout\\Dashboard.tsx",["242","243","244","245"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { \r\n    changeUserActivity, \r\n    getFriendRequests, \r\n    getFriends, \r\n    getNotifications, \r\n    getProfile, \r\n    getSendedFriendRequests, \r\n    setCurrentProfileUsername\r\n} from '../../actions/profileActions'\r\nimport CreatePost from '../modals/CreatePost'\r\nimport Posts from '../post/Posts'\r\nimport SideNavLeft from '../sidenavs/SideNavLeft'\r\nimport SideNavRight from '../sidenavs/SideNavRight'\r\nimport {State} from '../../interfaces'\r\nimport { fetchPosts, getAllLikes } from '../../actions/postActions'\r\nimport CreateComment from '../modals/CreateComment'\r\nimport CreateAnswer from '../modals/CreateAnswer'\r\nimport SearchProfile from '../modals/SearchProfile'\r\nimport SearchedProfileResults from '../profile/SearchedProfileResults'\r\nimport Notifications from '../modals/notification/Notifications'\r\nimport axios from 'axios'\r\nimport { API } from '../../helper'\r\nimport { toast } from 'react-toastify'\r\nimport { GET_NEW_NOTIFICATIONS, UPDATE_FRIENDS_ACTIVITY } from '../../actionTypes/profileActionTypes'\r\nimport Conversation from '../messages/Conversation'\r\nimport Messages from '../modals/messages/Messages'\r\nimport { getConversations } from '../../actions/conversationActions'\r\n\r\nconst Dashboard = () => {\r\n    const {user} = useSelector((state:State) => state.user) \r\n    const {profile, showSearchingResults} = useSelector((state:State) => state.profile)\r\n    const {showModal, modalType} = useSelector((state:State) => state.layout)\r\n    const {showConversation} = useSelector((state: State) => state.conversation) \r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const checkForNewNotifications = () => {\r\n        axios\r\n        .get(`${API}/profile/new_notifications/${user.id}/${profile.id}`, {withCredentials: true})\r\n        .then(res => {\r\n            if(!res.data.message){\r\n                dispatch({type: GET_NEW_NOTIFICATIONS, payload: {notifications: res.data}})\r\n            }\r\n\r\n            checkForNewNotifications();\r\n        })\r\n        .catch(err => {\r\n            toast.error(err.message)\r\n            checkForNewNotifications()\r\n        })\r\n    }\r\n\r\n    const checkForFriendsChangeInActivity = () => {\r\n        axios\r\n        .get(`${API}/profile/friends/change_in_activity/${user.id}/${profile.id}`, {withCredentials: true})\r\n        .then(res => {\r\n            if(!res.data.message){\r\n                dispatch({type: UPDATE_FRIENDS_ACTIVITY, payload: {changedFriendsActivity: res.data}});\r\n            }\r\n\r\n            checkForFriendsChangeInActivity()\r\n        })\r\n        .catch(err => {\r\n            toast.error(err.message);\r\n            checkForFriendsChangeInActivity()\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getProfile(user.id));\r\n        dispatch(setCurrentProfileUsername(null));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(profile.id !== 0){\r\n            dispatch(getAllLikes(user.id, profile.id));\r\n            dispatch(fetchPosts(user.id, profile.id));\r\n            dispatch(getFriends(user.id, profile.id));\r\n            dispatch(getFriendRequests(user.id, profile.id));\r\n            dispatch(getSendedFriendRequests(user.id, profile.id));\r\n            dispatch(getNotifications(user.id, profile.id));\r\n            dispatch(changeUserActivity(user.id, profile.id, 1));\r\n            dispatch(getConversations(user.id, profile.id))\r\n\r\n            // checkForNewNotifications()\r\n            // checkForFriendsChangeInActivity()\r\n        }\r\n    }, [profile, dispatch])\r\n\r\n    return (\r\n        <div className=\"dashboard container\">\r\n            <React.Fragment>\r\n                <SideNavLeft/>\r\n\r\n                <SideNavRight/>\r\n            </React.Fragment>\r\n\r\n            {showModal && modalType === \"post\" && <CreatePost/>}\r\n\r\n            {showModal && modalType === \"comment\" && <CreateComment/>}\r\n\r\n            {showModal && modalType === \"answer\" && <CreateAnswer/>}\r\n\r\n            {showModal && modalType === \"search-profile\" && <SearchProfile />}\r\n\r\n            {showModal && modalType === \"notifications\" && <Notifications/>}\r\n\r\n            {showModal && modalType === \"messages\" && <Messages/>}\r\n\r\n            {showSearchingResults && <SearchedProfileResults/>}\r\n\r\n            {!showSearchingResults && <Posts/>}\r\n\r\n            {showConversation && <Conversation />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\SideNavLeft.tsx",["246"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { openModal } from '../../actions/layoutActions';\r\nimport { clearMatches } from '../../actions/profileActions';\r\nimport { State } from '../../interfaces';\r\n\r\nconst SideNavLeft = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {notifications} = useSelector((state:State) => state.profile);\r\n    const {modalType} = useSelector((state:State) => state.layout);\r\n    const {convos} = useSelector((state:State) => state.conversation);\r\n    const {profile} = useSelector((state: State) => state.profile);\r\n\r\n    const [unseenNotifications, setUnseenNotifications] = useState(notifications.filter(notification => notification.seen === 0).length)\r\n    const [unseenMessages, setUnseenMessages] = useState(\r\n        convos.filter(\r\n            convo => convo.lastMessage.seen === 0 && convo.lastMessage.profile_id !== profile.id\r\n        ).length\r\n    )\r\n\r\n    useEffect(() => {\r\n        setUnseenNotifications(notifications.filter(notification => notification.seen === 0).length)\r\n    }, [notifications])\r\n\r\n    useEffect(() => {\r\n        setUnseenMessages(\r\n            convos.filter(\r\n                convo => convo.lastMessage.seen === 0 && convo.lastMessage.profile_id !== profile.id\r\n            ).length\r\n        )\r\n    }, [convos])\r\n\r\n    return (\r\n        <ul className=\"sidenav sidenav-left shadow\">\r\n            <li>\r\n                <button className=\"btn btn-primary\" onClick={() => {\r\n                    if(modalType !== \"\"){\r\n                        return;\r\n                    }\r\n                    \r\n                    dispatch(openModal(\"post\"))\r\n                }}>Create Post +</button>\r\n            </li>\r\n            <li>\r\n                <button className=\"btn btn-search-profile btn-outline-success\" onClick={() => {\r\n                    dispatch(clearMatches())\r\n                    dispatch(openModal('search-profile'))\r\n                }}>\r\n                    Search Profile\r\n                </button>\r\n            </li>\r\n            <li \r\n                className=\"clickable\" \r\n                onClick={() => dispatch(openModal(\"notifications\"))}\r\n            >\r\n                Notifications <i className=\"fas fa-bell\"></i> {unseenNotifications > 0 && <span>{unseenNotifications}</span>}\r\n            </li>\r\n            <li \r\n                className=\"clickable\"\r\n                onClick={() => dispatch(openModal(\"messages\"))}\r\n            >\r\n                Messages <i className=\"fas fa-inbox\"></i> {unseenMessages > 0 && <span>{unseenMessages}</span>}\r\n            </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default SideNavLeft\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\SideNavRight.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\Posts.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\Post.tsx",["247","248"],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\comment\\Comments.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\comment\\Comment.tsx",["249"],"import React, {useEffect, useState} from 'react'\r\nimport { Comment as CommentObj } from '../../../interfaces/post';\r\nimport Answers from '../answer/Answers'\r\nimport Moment from 'react-moment';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { State } from '../../../interfaces';\r\nimport { likeComment, removeComment, unlikeComment, updateComment } from '../../../actions/postActions';\r\nimport { openModal, setCommentIndex, setIdToUseInModal, setPostIndex } from '../../../actions/layoutActions';\r\n\r\nconst Comment = (props: {comment: CommentObj, post_index: number, comment_index: number}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user} = useSelector((state: State) => state.user)\r\n    const {profile} = useSelector((state: State) => state.profile)\r\n    const {commentsLiked, canClickLikeButton} = useSelector((state: State) => state.post)\r\n    const {modalType} = useSelector((state: State) => state.layout)\r\n\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [showAnswers, setShowAnswers] = useState(false);\r\n    const [commentText, setCommentText] = useState(props.comment.comment_text);\r\n    const [edit, setEdit] = useState(false)\r\n    const [isLiked, setIsLiked] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        setIsLiked(commentsLiked.findIndex(c => c.comment_id === props.comment.id) !== -1 ? true : false)\r\n    }, [commentsLiked])\r\n\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        let comment = {...props.comment};\r\n        comment.comment_text = commentText;\r\n\r\n        dispatch(updateComment(user.id, profile.id, comment, props.post_index));\r\n\r\n        setEdit(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card-body comment\">\r\n            {props.comment.profile_id === profile.id && <span className=\"options-button\" onClick={() => setShowOptions(!showOptions)}>\r\n                <i className=\"fas fa-ellipsis-h\"></i>\r\n            </span>}\r\n\r\n            {showOptions && <ul className=\"options shadow card\">\r\n                <li onClick={() => {\r\n                    setEdit(true);\r\n                    setShowOptions(false);\r\n                }}>Edit <i className=\"fas fa-edit\"></i></li>\r\n                <li onClick={() => {\r\n                        dispatch(removeComment(user.id, profile.id, props.comment.id, props.post_index))\r\n                        setShowOptions(false);\r\n                    }\r\n                }>Delete <i className=\"fas fa-trash-alt\"></i></li>\r\n            </ul>}\r\n\r\n            <div className=\"posted-by\">\r\n                <img src=\"/assets/user.png\" className=\"img-fluid\" alt=\"Default User\"/> {props.comment.username} \r\n                <span className=\"time-posted\"><Moment format=\"D MMMM YYYY hh:mm\">{props.comment.created_at}</Moment></span>\r\n            </div>\r\n\r\n            {!edit && <p className=\"card-text\">\r\n                {props.comment.comment_text}\r\n            </p>}\r\n\r\n            {edit && \r\n                <form className=\"clearfix update-form\" onSubmit={onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <textarea\r\n                            className=\"form-control\"\r\n                            rows={4}\r\n                            value={commentText} \r\n                            onChange={e => setCommentText(e.target.value)}\r\n                            required\r\n                        >\r\n                        </textarea>\r\n\r\n                        <div className=\"buttons float-end\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setEdit(false)}>Cancel</button>\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Update</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            }\r\n\r\n            <div className=\"post-icons\">\r\n                <span>\r\n                    <span \r\n                        style={isLiked ? {color: 'var(--bs-primary)'} : {}} \r\n                        onClick={() => {\r\n                            if(!canClickLikeButton){\r\n                                return;\r\n                            }\r\n\r\n                            if(!isLiked){\r\n                                dispatch(likeComment(user.id, profile.id, props.comment.id, props.post_index));\r\n                                setIsLiked(true);\r\n                            }else{\r\n                                dispatch(unlikeComment(user.id, profile.id, props.comment.id, props.post_index));\r\n                                setIsLiked(false);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <i className=\"fas fa-thumbs-up\"></i> Like\r\n                    </span> \r\n                    <span className=\"badge bg-primary\">{props.comment.likes}</span>\r\n                </span>\r\n\r\n                <span>\r\n                    <span onClick={() => {\r\n                            if(modalType !== \"\"){\r\n                                return;\r\n                            }\r\n\r\n                            dispatch(openModal(\"answer\"))\r\n                            dispatch(setIdToUseInModal(props.comment.id));\r\n                            dispatch(setPostIndex(props.post_index));\r\n                            dispatch(setCommentIndex(props.comment_index))\r\n                        }}>\r\n                        <i className=\"far fa-comments\"></i> Answers\r\n                    </span> \r\n                    <span className=\"badge bg-primary\">{props.comment.answers.length}</span>\r\n                </span>\r\n            </div>\r\n\r\n            {showAnswers && <Answers answers={props.comment.answers} comment_index={props.comment_index} post_index={props.post_index} />}\r\n\r\n            {props.comment.answers.length > 0 && <button \r\n                className=\"btn btn-outline-warning bg-white text-warning border border-warning show-answers\" \r\n                onClick={() => setShowAnswers(!showAnswers)}\r\n            >\r\n                {!showAnswers ? \"Show Answers +\" : \"Hide Answers -\"}\r\n            </button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\answer\\Answers.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\answer\\Answer.tsx",["250"],"import React, { useEffect, useState } from 'react'\r\nimport { Answer as AnswerObj } from '../../../interfaces/post'\r\nimport Moment from 'react-moment'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { State } from '../../../interfaces';\r\nimport { likeAnswer, removeAnswer, unlikeAnswer, updateAnswer } from '../../../actions/postActions';\r\n\r\nconst Answer = (props: {answer: AnswerObj, post_index: number, comment_index: number}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user} = useSelector((state: State) => state.user)\r\n    const {profile} = useSelector((state: State) => state.profile)\r\n    const {answersLiked, canClickLikeButton} = useSelector((state: State) => state.post)\r\n\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [answerText, setAnswerText] = useState(props.answer.answer_text);\r\n    const [edit, setEdit] = useState(false)\r\n    const [isLiked, setIsLiked] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        setIsLiked(answersLiked.findIndex(a => a.answer_id === props.answer.id) !== -1 ? true : false)\r\n    }, [answersLiked])\r\n\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        let answer = {...props.answer};\r\n        answer.answer_text = answerText;\r\n\r\n        dispatch(updateAnswer(user.id, profile.id, answer, props.post_index, props.comment_index));\r\n\r\n        setEdit(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card-body answer\">\r\n            {props.answer.profile_id === profile.id && <span className=\"options-button\" onClick={() => setShowOptions(!showOptions)}>\r\n                <i className=\"fas fa-ellipsis-h\"></i>\r\n            </span>}\r\n\r\n            {showOptions && <ul className=\"options shadow card\">\r\n                <li onClick={() => {\r\n                    setEdit(true);\r\n                    setShowOptions(false);\r\n                }}>Edit <i className=\"fas fa-edit\"></i></li>\r\n                <li onClick={() => {\r\n                        dispatch(removeAnswer(user.id, profile.id, props.answer.id, props.post_index, props.comment_index))\r\n                        setShowOptions(false);\r\n                    }\r\n                }>Delete <i className=\"fas fa-trash-alt\"></i></li>\r\n            </ul>}\r\n\r\n            <div className=\"posted-by\">\r\n                <img src=\"/assets/user.png\" className=\"img-fluid\" alt=\"Default User\"/> {props.answer.username} \r\n                <span className=\"time-posted\"><Moment format=\"D MMMM YYYY hh:mm\">{props.answer.created_at}</Moment></span>\r\n            </div>\r\n\r\n            {!edit && <p className=\"card-text\">\r\n                {props.answer.answer_text}\r\n            </p>}\r\n\r\n            {edit && \r\n                <form className=\"clearfix update-form\" onSubmit={onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <textarea\r\n                            className=\"form-control\"\r\n                            rows={4}\r\n                            value={answerText} \r\n                            onChange={e => setAnswerText(e.target.value)}\r\n                            required\r\n                        >\r\n                        </textarea>\r\n\r\n                        <div className=\"buttons float-end\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setEdit(false)}>Cancel</button>\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Update</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            }\r\n\r\n            <div className=\"post-icons\">\r\n                <span>\r\n                    <span\r\n                        style={isLiked ? {color: 'var(--bs-primary)'} : {}} \r\n                        onClick={() => {\r\n                            if(!canClickLikeButton){\r\n                                return;\r\n                            }\r\n\r\n                            if(!isLiked){\r\n                                dispatch(likeAnswer(user.id, profile.id, props.answer.id, props.post_index, props.comment_index));\r\n                                setIsLiked(true);\r\n                            }else{\r\n                                dispatch(unlikeAnswer(user.id, profile.id, props.answer.id, props.post_index, props.comment_index));\r\n                                setIsLiked(false);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <i className=\"fas fa-thumbs-up\"></i> Like\r\n                    </span> \r\n                    <span className=\"badge bg-primary\">{props.answer.likes}</span>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Answer\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreatePost.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\profileReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\profileActionTypes.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\profileActions.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\postReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\postActionTypes.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\postActions.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreateComment.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreateAnswer.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\SearchProfile.tsx",["251"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { closeModal } from '../../actions/layoutActions';\r\nimport { clearMatches, findUsernameMatches, getSearchingResults } from '../../actions/profileActions';\r\nimport { State } from '../../interfaces';\r\n\r\nconst SearchProfile = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user} = useSelector((state: State) => state.user);\r\n    const {searchMatches, profile} = useSelector((state: State) => state.profile);\r\n\r\n    const [searchedProfileUsername, setSearchedProfileUsername] = useState(\"\");\r\n    const [matches, setMatches] = useState([] as RegExpMatchArray[])\r\n\r\n    const handleSearchChanged = (search=searchedProfileUsername) => {\r\n        let regex = new RegExp(`^${search}`, 'i');\r\n\r\n        let currentMatches = [] as RegExpMatchArray[];\r\n\r\n        for(let i = 0; i < searchMatches.length; i++){\r\n            let match = searchMatches[i].username.match(regex);\r\n            if(match){\r\n                currentMatches.push(match!)\r\n            }\r\n        }\r\n\r\n        setMatches(currentMatches);\r\n    }\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if(searchedProfileUsername === \"\"){\r\n            dispatch(findUsernameMatches(user.id, profile.id, e.target.value[0]));\r\n        }\r\n\r\n        if(searchedProfileUsername !== \"\" && e.target.value === \"\"){\r\n            dispatch(clearMatches())\r\n        }\r\n\r\n        setSearchedProfileUsername(e.target.value)\r\n\r\n        if(searchMatches.length !== 0){\r\n            handleSearchChanged(e.target.value);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        dispatch(getSearchingResults(user.id, profile.id, searchedProfileUsername));\r\n\r\n        dispatch(closeModal());\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleSearchChanged();\r\n    }, [searchMatches])\r\n\r\n    return (\r\n        <div className=\"search-profile-container\">\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"input-group\">\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Search profile...\" \r\n                        value={searchedProfileUsername}\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <button type=\"submit\">\r\n                        <i className=\"fas fa-search\"></i>\r\n                    </button>\r\n\r\n                    <span onClick={() => dispatch(closeModal())}>&#x2715;</span>\r\n\r\n                    <ul className=\"autocomplete\">\r\n                        {\r\n                            matches.map((match, i) => (\r\n                                <li \r\n                                    key={i} \r\n                                    onClick={() => {\r\n                                        setSearchedProfileUsername(searchedProfileUsername + match.input!.slice(searchedProfileUsername.length))\r\n                                        setMatches([])\r\n                                    }}\r\n                                >\r\n                                    {searchedProfileUsername}\r\n                                    <span>{match.input!.slice(searchedProfileUsername.length)}</span>\r\n                                </li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchProfile\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\Profile.tsx",["252","253"],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\SearchedProfileResults.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\SearchResult.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\RequestButton.tsx",["254"],"import React, {useState, useEffect} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { acceptFriendRequest, cancelFriendRequest, removeFriend, sendFriendRequest } from '../../actions/profileActions';\r\nimport { State } from '../../interfaces';\r\n\r\nconst RequestButton = (props: {profileId: number}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user} = useSelector((state: State) => state.user);\r\n    const {friends, friendRequests, sendedFriendRequests, canClickRequestButton, profile} = useSelector((state: State) => state.profile);\r\n\r\n    let friend = friends.find(friend => friend.friend_profile_id === props.profileId);\r\n\r\n    const [requestSended, setRequestSended] = \r\n        useState(sendedFriendRequests.find(request => request.receiver_profile_id === props.profileId) ? true : false);\r\n\r\n    const [isFriend, setIsFriend] = useState(friend ? true : false)\r\n    const [friendshipId, setFriendshipId] = useState(isFriend && friend ? friend.id : 0)\r\n    const [hasRequestFromThisProfile, setHasRequestFromThisProfile] =\r\n        useState(friendRequests.find(request => request.sender_profile_id === props.profileId) ? true : false)\r\n\r\n    useEffect(() => {\r\n        let friend = friends.find(friend => friend.friend_profile_id === props.profileId);\r\n        setIsFriend(friend ? true : false)\r\n        setFriendshipId(friend ? friend.id : 0)\r\n\r\n        setHasRequestFromThisProfile(\r\n            friend ? false : friendRequests.find(request => request.sender_profile_id === props.profileId) ? true : false\r\n        );\r\n    }, [friends])\r\n\r\n    return (\r\n        <button\r\n            className={\r\n                (isFriend || requestSended) ?\r\n                \"btn btn-danger\" : \r\n                hasRequestFromThisProfile ? \r\n                \"btn btn-success\" :\r\n                \"btn btn-primary\"\r\n            }\r\n            disabled={!canClickRequestButton}\r\n            onClick={() => {\r\n                if(!canClickRequestButton){\r\n                    return;\r\n                }\r\n\r\n                if(isFriend){\r\n                    dispatch(removeFriend(user.id, profile.id, friendshipId));\r\n                }else{\r\n                    if(hasRequestFromThisProfile){\r\n                        dispatch(acceptFriendRequest(user.id, profile.id, props.profileId));\r\n                    }else{\r\n                        if(!requestSended){\r\n                            dispatch(sendFriendRequest(user.id, profile.id, props.profileId))\r\n                            setRequestSended(true);\r\n                        }else{\r\n                            dispatch(cancelFriendRequest(user.id, profile.id, props.profileId))\r\n                            setRequestSended(false);\r\n                        }\r\n                    }\r\n                }\r\n            }}\r\n        >\r\n            {\r\n                isFriend ? \"Remove Friend\" \r\n                : hasRequestFromThisProfile ?\r\n                \"Accept Friend Request\" :\r\n                requestSended ? \"Cancel Friend Request\" :\r\n                \"Send Friend Request\"\r\n            }\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default RequestButton\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\notification\\Notifications.tsx",["255","256"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { closeModal } from '../../../actions/layoutActions'\r\nimport { readNotifications } from '../../../actions/profileActions'\r\nimport { State } from '../../../interfaces'\r\nimport Notification from './Notification'\r\n\r\nconst Notifications = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user} = useSelector((state: State) => state.user);\r\n    const {notifications, profile} = useSelector((state: State) => state.profile);\r\n\r\n    const [myNotifications, setMyNotifications] = useState(notifications)\r\n\r\n    useEffect(() => {\r\n        dispatch(readNotifications(user.id, profile.id));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(notifications.length < myNotifications.length){\r\n            setMyNotifications(notifications);\r\n        }\r\n    }, [notifications])\r\n\r\n    return (\r\n        <div className=\"modal notifications\">\r\n            <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\">Notifications</h5>\r\n                        <button type=\"button\" className=\"btn-close\" onClick={() => dispatch(closeModal())}></button>\r\n                    </div>\r\n\r\n                    <div className=\"modal-body\">\r\n                        {myNotifications.map(notification => (\r\n                            <Notification key={notification.id} notification={notification} />\r\n                        ))}\r\n\r\n                        {\r\n                            myNotifications.length === 0 && <p className=\"no-notifications\">You Have 0 Notifications</p>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notifications\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\notification\\Notification.tsx",["257"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { acceptFriendRequest, deleteNotification } from '../../../actions/profileActions';\r\nimport { DELETE_NOTIFICATION } from '../../../actionTypes/profileActionTypes';\r\nimport { State } from '../../../interfaces';\r\nimport { Notification as Notif } from '../../../interfaces/profile'\r\nimport Moment from 'react-moment'\r\n\r\nconst Notification = (props: {notification: Notif}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user} = useSelector((state: State) => state.user)\r\n    const {profile} = useSelector((state: State) => state.profile)\r\n\r\n    let notification = props.notification.notification.split(\" \");\r\n    const username = notification[0];\r\n    const notificationMessage = notification.reduce((acc, word, i) => {\r\n        if(i !== 0){\r\n            acc += word;\r\n\r\n            if(i !== notification.length){\r\n                acc += \" \"\r\n            }\r\n\r\n            return acc;\r\n        }else{\r\n            return acc;\r\n        }\r\n    }, \"\");\r\n\r\n    const [isSeen, setIsSeen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(props.notification.seen === 1){\r\n            setIsSeen(true)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={isSeen ? \"notification seen\" : \"notification\"}>\r\n            <img src={props.notification.profile_image} alt=\"user Default\"/>\r\n\r\n            <div className=\"notification-message\">\r\n                <div>\r\n                    <span><Moment format=\"DD/MM/YYY hh:mm:ss\">{props.notification.created_at}</Moment></span>\r\n                    <p><strong>{username}</strong> {notificationMessage}</p>\r\n                </div>\r\n\r\n                {\r\n                    props.notification.notification_type === \"friend_request\" && \r\n                    <button \r\n                        className=\"btn btn-success\" \r\n                        onClick={() => {\r\n                            dispatch(acceptFriendRequest(user.id, profile.id, props.notification.sender_profile_id))\r\n                            dispatch({type: DELETE_NOTIFICATION, payload: {notificationId: props.notification.id}})\r\n                        }}\r\n                    >\r\n                        Accept Friend Request\r\n                    </button>\r\n                }\r\n\r\n                <div \r\n                    className=\"delete-notification\" \r\n                    onClick={() => dispatch(deleteNotification(user.id, profile.id, props.notification.id))}\r\n                ></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\messages\\Conversation.tsx",["258","259","260","261"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport Picker, { IEmojiData } from 'emoji-picker-react';\r\nimport ConversationMessage from './ConversationMessage';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { \r\n    closeConversation, \r\n    getConversationMessages, \r\n    increaseMessageStarting, \r\n    newMessage, \r\n    readConversationMessages, \r\n    setCurrentConversation, \r\n    setHasMoreMessagesToLoad, \r\n    setShowConversation \r\n} from '../../actions/conversationActions';\r\nimport io from 'socket.io-client'\r\nimport { State } from '../../interfaces';\r\nimport { Message } from '../../interfaces/conversation';\r\nimport { Friend } from '../../interfaces/profile';\r\n\r\nconst Conversation = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user} = useSelector((state: State) => state.user)\r\n    const {profile, friends} = useSelector((state: State) => state.profile)\r\n    const {currentConversation, messages, loading, starting, hasMoreMessagesToLoad} = useSelector((state: State) => state.conversation)\r\n\r\n    const messageRef = useRef<HTMLDivElement>(null);\r\n    const conversationBodyRef = useRef<HTMLDivElement>(null);\r\n\r\n    const socketClient = useRef<SocketIOClient.Socket>();\r\n\r\n    const [typing, setTyping] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [showEmojis, setShowEmojis] = useState(false);\r\n    const [textAreaHeight, setTextAreaHeight] = useState(35);\r\n    const [backspaceWasLast, setBackspaceWasLast] = useState(false);\r\n    const [friend, setFriend] = useState<Friend | undefined>(undefined);\r\n    const [friendIsTyping, setFriendIsTyping] = useState(false);\r\n    const [imTyping, setImTyping] = useState(false);\r\n    const [messagesLoaded, setMessagesLoaded] = useState(false);\r\n    const [scrollHeight, setScrollHeight] = useState(0)\r\n    const [messageSend, setMessageSend] = useState(false)\r\n\r\n    const onEmojiClick = (e: React.MouseEvent<Element, MouseEvent>, data: IEmojiData) => {\r\n        setMessage(message + data.emoji);\r\n    };\r\n\r\n    const screenClick = (e: MouseEvent) => {\r\n        const target = e.target! as HTMLElement;\r\n\r\n        if(\r\n            target.classList.contains(\"dashboard\") ||\r\n            target.classList.contains(\"conversation-header\") ||\r\n            target.classList.contains(\"conversation-body\") ||\r\n            target.classList.contains(\"conversation-bottom\") ||\r\n            target.classList.contains(\"fas fa-thumbs-up\") ||\r\n            target.classList.contains(\"profile\") ||\r\n            target.classList.contains(\"profile-header\")\r\n        ){\r\n            setShowEmojis(false);\r\n        }\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        if(socketClient.current && currentConversation){\r\n            socketClient.current.emit(\"message\", profile.id, currentConversation.friendId, message, false);\r\n\r\n            if(imTyping){\r\n                setImTyping(false);\r\n                socketClient.current.emit('typing', profile.id, false);\r\n            }\r\n        }\r\n\r\n        setMessage(\"\");\r\n        setMessageSend(true)\r\n    }\r\n\r\n    const sendIcon = () => {\r\n        if(socketClient.current && currentConversation){\r\n            socketClient.current.emit(\"message\", profile.id, currentConversation.friendId, \"👍\", true);\r\n        }\r\n        setMessageSend(true)\r\n    }\r\n\r\n    const scrollToBottom = () => {\r\n        if(messageRef.current){\r\n            messageRef.current.scrollIntoView(); \r\n        }\r\n    }\r\n\r\n    const scrollToPrevFirstMessage = () => {\r\n        if(conversationBodyRef.current){\r\n            conversationBodyRef.current.scrollTo({top: conversationBodyRef.current.scrollHeight - scrollHeight})\r\n        }\r\n    }\r\n\r\n    const calculateTextWidth = (text: string) : number => {\r\n        const canvas = document.createElement(\"canvas\")\r\n        const context = canvas.getContext(\"2d\");\r\n\r\n        context!.font = getComputedStyle(document.body).font;\r\n\r\n        return context!.measureText(text).width;\r\n    }\r\n\r\n    const scrollListener = (e: Event) => {\r\n        if(conversationBodyRef.current){\r\n            if(conversationBodyRef.current.scrollTop === 0){\r\n                dispatch(increaseMessageStarting())\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        socketClient.current = io.connect(\"http://localhost:5000\");\r\n\r\n        window.addEventListener(\"click\", screenClick);\r\n\r\n        return () => {\r\n            if(socketClient.current){\r\n                if(currentConversation){\r\n                    socketClient.current.emit('typing', profile.id, false)\r\n                }\r\n\r\n                socketClient.current.disconnect();\r\n                socketClient.current = undefined;\r\n            }\r\n\r\n            window.removeEventListener(\"click\", screenClick);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let conversationBodyElement = conversationBodyRef.current;\r\n\r\n        if(currentConversation){\r\n            setFriend(friends.find(friend => friend.friend_profile_id === currentConversation.friendId));\r\n            dispatch(getConversationMessages(user.id, profile.id, currentConversation.id))\r\n            dispatch(readConversationMessages(user.id, profile.id, currentConversation.id));\r\n\r\n            if(conversationBodyRef.current){\r\n                setScrollHeight(conversationBodyRef.current.scrollHeight);\r\n                conversationBodyRef.current.addEventListener(\"scroll\", scrollListener);\r\n            }\r\n\r\n            if(socketClient.current){\r\n                socketClient.current.emit(\"open-convo\", currentConversation.id);\r\n\r\n                socketClient.current.on(\"new-message\", (messageObj: Message) => {\r\n                    dispatch(newMessage(messageObj, currentConversation.id));\r\n                })\r\n\r\n                socketClient.current.on(`${currentConversation.friendId}-is-typing`, (typing: boolean) => {\r\n                    setFriendIsTyping(typing);\r\n\r\n                    if(typing){\r\n                        scrollToBottom();\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            if(conversationBodyElement){\r\n                conversationBodyElement.removeEventListener(\"scroll\", scrollListener);\r\n            }\r\n        }\r\n    }, [currentConversation])\r\n\r\n    useEffect(() => {\r\n        if(!messagesLoaded && messages.length > 0 && !messageSend){\r\n            scrollToBottom();\r\n            setMessagesLoaded(true);\r\n        }else if(messagesLoaded && messages.length > 0 && !messageSend){\r\n            scrollToPrevFirstMessage();\r\n\r\n            if(conversationBodyRef.current){\r\n                setScrollHeight(conversationBodyRef.current.scrollHeight)\r\n            }\r\n        }else{\r\n            scrollToBottom();\r\n            setMessageSend(false)\r\n        }\r\n\r\n        let numberOfNewMessages = messages.slice(starting).length;\r\n\r\n        if(numberOfNewMessages < 15){\r\n            dispatch(setHasMoreMessagesToLoad(false))\r\n        }\r\n        \r\n    }, [messages])\r\n\r\n    useEffect(() => {\r\n        if(starting > 0 && currentConversation && hasMoreMessagesToLoad){\r\n            dispatch(getConversationMessages(user.id, profile.id, currentConversation.id, starting))\r\n        }\r\n    }, [starting])\r\n\r\n    if(!currentConversation){\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"conversation\">\r\n            <div className=\"conversation-container\">\r\n                <div className=\"conversation-header\">\r\n                    <img src=\"/assets/user.png\" alt=\"Default User\"/>\r\n                    <div className=\"user\">\r\n                        <span className=\"username\">{friend?.username || \"\"}</span>\r\n                        <div className={friend?.is_active === 1 ? \"user-activity active\" : \"user-activity\"}>\r\n                            {friend?.is_active === 1 ? \"Active\" : \"Inactive\"}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"close-conversation\" onClick={() => {\r\n                        dispatch(setCurrentConversation(null))\r\n                        dispatch(closeConversation())\r\n                        dispatch(setShowConversation(false))\r\n                    }}>&#x2715;</div>\r\n                </div>\r\n\r\n                <div className=\"conversation-body\" ref={conversationBodyRef}>\r\n                    {\r\n                        loading && \r\n                        <div className=\"d-flex justify-content-center align-items-center loading\">\r\n                            <div className=\"spinner-border\"></div>\r\n                            <span>Loading...</span>\r\n                        </div>\r\n                    }\r\n\r\n                    {\r\n                        messages.map((message, i) => (\r\n                            <ConversationMessage \r\n                                key={message.id} \r\n                                message={message} \r\n                                prevMessage={i > 0 ? messages[i - 1] : null} \r\n                                isLastMessage={i === messages.length - 1}\r\n                            />\r\n                        ))\r\n                    }\r\n\r\n                    {   friendIsTyping &&\r\n                        <div className=\"typing\">\r\n                            Typing <span>...</span>\r\n                        </div>\r\n                    }\r\n\r\n                    <div className=\"message-ref\" ref={messageRef}></div>\r\n                </div>\r\n\r\n                <div className=\"conversation-bottom\">\r\n                    <div className=\"message-input\">\r\n                        <textarea\r\n                            style={{height: textAreaHeight}}\r\n                            maxLength={1000}\r\n                            placeholder=\"Aa\" \r\n                            className={typing || message.length > 0 ? \"typing\" : \"\"}\r\n                            value={message}\r\n                            rows={20}\r\n                            onChange={e => {\r\n                                setMessage(e.target.value);\r\n\r\n                                if(e.target.value.length > 0){\r\n                                    if(!imTyping){\r\n                                        setImTyping(true);\r\n                                        if(socketClient.current){\r\n                                            socketClient.current.emit('typing', profile.id, true);\r\n                                        }\r\n                                    }\r\n                                }else{\r\n                                    if(imTyping && socketClient.current){\r\n                                        socketClient.current.emit('typing', profile.id, false);\r\n                                    }\r\n                                }\r\n\r\n                                let textWidth = calculateTextWidth(e.target.value);\r\n\r\n                                if(e.target.value[e.target.value.length - 1] === \"\\n\"){\r\n                                    if(backspaceWasLast){\r\n                                        setTextAreaHeight(textAreaHeight - 20)\r\n                                    }else{\r\n                                        setTextAreaHeight(textAreaHeight + 20)\r\n                                    }\r\n                                }else{\r\n                                    if(textWidth >= 205 && e.target.value !== \"\"){\r\n                                        if(textWidth % 200 <= 15){\r\n                                            let newHeight = 15 + (Math.trunc(textWidth / 205) * 2 * 20);\r\n\r\n                                            if(newHeight > 150){\r\n                                                newHeight = 150\r\n                                            }\r\n        \r\n                                            setTextAreaHeight(newHeight);\r\n                                        }\r\n                                        \r\n                                    }else if(e.target.textLength < 21){\r\n                                        setTextAreaHeight(35)\r\n                                    }\r\n                                }\r\n\r\n                                setBackspaceWasLast(false)\r\n                            }}\r\n                            onFocus={() => setTyping(true)}\r\n                            onBlur={() => setTyping(false)}\r\n                            onKeyDown={e => {\r\n                                if(e.key === \"Enter\" && !e.shiftKey){\r\n                                    e.preventDefault();\r\n                                    sendMessage();\r\n                                }else if(e.key === \"Backspace\"){\r\n                                    setBackspaceWasLast(true)\r\n                                }\r\n                            }}\r\n                        ></textarea>\r\n\r\n                        <i\r\n                            onClick={() => setShowEmojis(true)}\r\n                            className={typing || message.length > 0 ? \"typing fas fa-smile\" : \"fas fa-smile\"}\r\n                        ></i>\r\n                    </div>\r\n\r\n                    <i className=\"fas fa-thumbs-up\" onClick={() => sendIcon()}></i>\r\n                </div>\r\n\r\n                <div className=\"emojis\" style={showEmojis ? {zIndex: 30, opacity: 1} : {zIndex: -9999, opacity: 0}}>\r\n                    <Picker onEmojiClick={onEmojiClick} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Conversation\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\conversationReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\conversationTypes.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\conversationActions.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\FriendListItem.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\messages\\Messages.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\messages\\ConversationMessage.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\messages\\Message.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\ProfileImages.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\UpdateProfileImage.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\ProfileHeader.tsx",["262"],{"ruleId":"263","replacedBy":"264"},{"ruleId":"265","replacedBy":"266"},{"ruleId":"267","severity":1,"message":"268","line":15,"column":6,"nodeType":"269","endLine":15,"endColumn":8,"suggestions":"270"},{"ruleId":"263","replacedBy":"271"},{"ruleId":"265","replacedBy":"272"},{"ruleId":"267","severity":1,"message":"273","line":18,"column":8,"nodeType":"269","endLine":18,"endColumn":25,"suggestions":"274"},{"ruleId":"275","severity":1,"message":"276","line":51,"column":13,"nodeType":"277","messageId":"278","endLine":51,"endColumn":37},{"ruleId":"275","severity":1,"message":"279","line":67,"column":13,"nodeType":"277","messageId":"278","endLine":67,"endColumn":44},{"ruleId":"267","severity":1,"message":"268","line":74,"column":8,"nodeType":"269","endLine":74,"endColumn":10,"suggestions":"280"},{"ruleId":"267","severity":1,"message":"281","line":90,"column":8,"nodeType":"269","endLine":90,"endColumn":27,"suggestions":"282"},{"ruleId":"267","severity":1,"message":"283","line":32,"column":8,"nodeType":"269","endLine":32,"endColumn":16,"suggestions":"284"},{"ruleId":"275","severity":1,"message":"285","line":10,"column":10,"nodeType":"277","messageId":"278","endLine":10,"endColumn":29},{"ruleId":"267","severity":1,"message":"286","line":30,"column":8,"nodeType":"269","endLine":30,"endColumn":20,"suggestions":"287"},{"ruleId":"267","severity":1,"message":"288","line":26,"column":8,"nodeType":"269","endLine":26,"endColumn":23,"suggestions":"289"},{"ruleId":"267","severity":1,"message":"290","line":22,"column":8,"nodeType":"269","endLine":22,"endColumn":22,"suggestions":"291"},{"ruleId":"267","severity":1,"message":"292","line":57,"column":8,"nodeType":"269","endLine":57,"endColumn":23,"suggestions":"293"},{"ruleId":"267","severity":1,"message":"294","line":32,"column":8,"nodeType":"269","endLine":32,"endColumn":10,"suggestions":"295"},{"ruleId":"267","severity":1,"message":"294","line":38,"column":8,"nodeType":"269","endLine":38,"endColumn":27,"suggestions":"296"},{"ruleId":"267","severity":1,"message":"297","line":30,"column":8,"nodeType":"269","endLine":30,"endColumn":17,"suggestions":"298"},{"ruleId":"267","severity":1,"message":"294","line":18,"column":8,"nodeType":"269","endLine":18,"endColumn":10,"suggestions":"299"},{"ruleId":"267","severity":1,"message":"300","line":24,"column":8,"nodeType":"269","endLine":24,"endColumn":23,"suggestions":"301"},{"ruleId":"267","severity":1,"message":"302","line":37,"column":8,"nodeType":"269","endLine":37,"endColumn":10,"suggestions":"303"},{"ruleId":"267","severity":1,"message":"304","line":131,"column":8,"nodeType":"269","endLine":131,"endColumn":10,"suggestions":"305"},{"ruleId":"267","severity":1,"message":"306","line":168,"column":8,"nodeType":"269","endLine":168,"endColumn":29,"suggestions":"307"},{"ruleId":"267","severity":1,"message":"308","line":191,"column":8,"nodeType":"269","endLine":191,"endColumn":18,"suggestions":"309"},{"ruleId":"267","severity":1,"message":"310","line":197,"column":8,"nodeType":"269","endLine":197,"endColumn":18,"suggestions":"311"},{"ruleId":"267","severity":1,"message":"312","line":39,"column":8,"nodeType":"269","endLine":39,"endColumn":27,"suggestions":"313"},"no-native-reassign",["314"],"no-negated-in-lhs",["315"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'user.id'. Either include them or remove the dependency array.","ArrayExpression",["316"],["314"],["315"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["317"],"@typescript-eslint/no-unused-vars","'checkForNewNotifications' is assigned a value but never used.","Identifier","unusedVar","'checkForFriendsChangeInActivity' is assigned a value but never used.",["318"],"React Hook useEffect has a missing dependency: 'user.id'. Either include it or remove the dependency array.",["319"],"React Hook useEffect has a missing dependency: 'profile.id'. Either include it or remove the dependency array.",["320"],"'fetchCurrentProfile' is defined but never used.","React Hook useEffect has a missing dependency: 'props.post.id'. Either include it or remove the dependency array. If 'setIsLiked' needs the current value of 'props.post.id', you can also switch to useReducer instead of useState and read 'props.post.id' in the reducer.",["321"],"React Hook useEffect has a missing dependency: 'props.comment.id'. Either include it or remove the dependency array. If 'setIsLiked' needs the current value of 'props.comment.id', you can also switch to useReducer instead of useState and read 'props.comment.id' in the reducer.",["322"],"React Hook useEffect has a missing dependency: 'props.answer.id'. Either include it or remove the dependency array. If 'setIsLiked' needs the current value of 'props.answer.id', you can also switch to useReducer instead of useState and read 'props.answer.id' in the reducer.",["323"],"React Hook useEffect has a missing dependency: 'handleSearchChanged'. Either include it or remove the dependency array.",["324"],"React Hook useEffect has missing dependencies: 'dispatch', 'profile.id', and 'user.id'. Either include them or remove the dependency array.",["325"],["326"],"React Hook useEffect has missing dependencies: 'friendRequests' and 'props.profileId'. Either include them or remove the dependency array. If 'setHasRequestFromThisProfile' needs the current value of 'props.profileId', you can also switch to useReducer instead of useState and read 'props.profileId' in the reducer.",["327"],["328"],"React Hook useEffect has a missing dependency: 'myNotifications.length'. Either include it or remove the dependency array.",["329"],"React Hook useEffect has a missing dependency: 'props.notification.seen'. Either include it or remove the dependency array.",["330"],"React Hook useEffect has missing dependencies: 'currentConversation' and 'profile.id'. Either include them or remove the dependency array.",["331"],"React Hook useEffect has missing dependencies: 'dispatch', 'friends', 'profile.id', 'scrollListener', and 'user.id'. Either include them or remove the dependency array.",["332"],"React Hook useEffect has missing dependencies: 'dispatch', 'messageSend', 'messagesLoaded', 'scrollToPrevFirstMessage', and 'starting'. Either include them or remove the dependency array.",["333"],"React Hook useEffect has missing dependencies: 'currentConversation', 'dispatch', 'hasMoreMessagesToLoad', 'profile.id', and 'user.id'. Either include them or remove the dependency array.",["334"],"React Hook useEffect has missing dependencies: 'currentProfile.profile_description' and 'currentProfile.status'. Either include them or remove the dependency array.",["335"],"no-global-assign","no-unsafe-negation",{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"336","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"desc":"353","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},"Update the dependencies array to be: [dispatch, user.id]",{"range":"374","text":"375"},"Update the dependencies array to be: [history, isAuthenticated]",{"range":"376","text":"377"},{"range":"378","text":"375"},"Update the dependencies array to be: [profile, dispatch, user.id]",{"range":"379","text":"380"},"Update the dependencies array to be: [convos, profile.id]",{"range":"381","text":"382"},"Update the dependencies array to be: [postsLiked, props.post.id]",{"range":"383","text":"384"},"Update the dependencies array to be: [commentsLiked, props.comment.id]",{"range":"385","text":"386"},"Update the dependencies array to be: [answersLiked, props.answer.id]",{"range":"387","text":"388"},"Update the dependencies array to be: [handleSearchChanged, searchMatches]",{"range":"389","text":"390"},"Update the dependencies array to be: [dispatch, profile.id, user.id]",{"range":"391","text":"392"},"Update the dependencies array to be: [currentProfile.id, dispatch, profile.id, user.id]",{"range":"393","text":"394"},"Update the dependencies array to be: [friendRequests, friends, props.profileId]",{"range":"395","text":"396"},{"range":"397","text":"392"},"Update the dependencies array to be: [myNotifications.length, notifications]",{"range":"398","text":"399"},"Update the dependencies array to be: [props.notification.seen]",{"range":"400","text":"401"},"Update the dependencies array to be: [currentConversation, profile.id]",{"range":"402","text":"403"},"Update the dependencies array to be: [currentConversation, dispatch, friends, profile.id, scrollListener, user.id]",{"range":"404","text":"405"},"Update the dependencies array to be: [dispatch, messageSend, messages, messagesLoaded, scrollToPrevFirstMessage, starting]",{"range":"406","text":"407"},"Update the dependencies array to be: [currentConversation, dispatch, hasMoreMessagesToLoad, profile.id, starting, user.id]",{"range":"408","text":"409"},"Update the dependencies array to be: [currentProfile.id, currentProfile.profile_description, currentProfile.status]",{"range":"410","text":"411"},[495,497],"[dispatch, user.id]",[598,615],"[history, isAuthenticated]",[2855,2857],[3520,3539],"[profile, dispatch, user.id]",[1346,1354],"[convos, profile.id]",[1526,1538],"[postsLiked, props.post.id]",[1384,1399],"[commentsLiked, props.comment.id]",[1086,1100],"[answersLiked, props.answer.id]",[1928,1943],"[handleSearchChanged, searchMatches]",[1508,1510],"[dispatch, profile.id, user.id]",[1674,1693],"[currentProfile.id, dispatch, profile.id, user.id]",[1571,1580],"[friendRequests, friends, props.profileId]",[713,715],[869,884],"[myNotifications.length, notifications]",[1239,1241],"[props.notification.seen]",[4763,4765],"[currentConversation, profile.id]",[6220,6241],"[currentConversation, dispatch, friends, profile.id, scrollListener, user.id]",[6947,6957],"[dispatch, messageSend, messages, messagesLoaded, scrollToPrevFirstMessage, starting]",[7180,7190],"[currentConversation, dispatch, hasMoreMessagesToLoad, profile.id, starting, user.id]",[1599,1618],"[currentProfile.id, currentProfile.profile_description, currentProfile.status]"]