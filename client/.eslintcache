[{"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\index.tsx":"1","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\App.tsx":"2","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\RegisterForm.tsx":"3","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\store.ts":"4","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\rootReducer.ts":"5","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\layoutReducer.ts":"6","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\layoutActionTypes.ts":"7","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\interfaces\\index.ts":"8","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\layout\\Layout.tsx":"9","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\NavBar.tsx":"10","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\layoutActions.ts":"11","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\helper\\index.ts":"12","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\userActionTypes.ts":"13","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\userActions.ts":"14","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\interfaces\\layout.ts":"15","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\LoginForm.tsx":"16","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\userReducer.ts":"17","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\routes\\Routes.tsx":"18","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\routes\\PrivateRoute.tsx":"19","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\layout\\Dashboard.tsx":"20","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\SideNavLeft.tsx":"21","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\SideNavRight.tsx":"22","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\Posts.tsx":"23","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\Post.tsx":"24","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\comment\\Comments.tsx":"25","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\comment\\Comment.tsx":"26","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\answer\\Answers.tsx":"27","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\answer\\Answer.tsx":"28","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreatePost.tsx":"29","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\profileReducer.ts":"30","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\profileActionTypes.ts":"31","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\profileActions.ts":"32","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\postReducer.ts":"33","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\postActionTypes.ts":"34","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\postActions.ts":"35","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreateComment.tsx":"36","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreateAnswer.tsx":"37"},{"size":483,"mtime":1613834219448,"results":"38","hashOfConfig":"39"},{"size":544,"mtime":1613834272005,"results":"40","hashOfConfig":"39"},{"size":10759,"mtime":1609624804606,"results":"41","hashOfConfig":"39"},{"size":310,"mtime":1609576083471,"results":"42","hashOfConfig":"39"},{"size":398,"mtime":1613836925115,"results":"43","hashOfConfig":"39"},{"size":2418,"mtime":1614009184978,"results":"44","hashOfConfig":"39"},{"size":538,"mtime":1614009019579,"results":"45","hashOfConfig":"39"},{"size":94,"mtime":1609453140940,"results":"46","hashOfConfig":"39"},{"size":2054,"mtime":1609695638038,"results":"47","hashOfConfig":"39"},{"size":2381,"mtime":1609696850445,"results":"48","hashOfConfig":"39"},{"size":1427,"mtime":1614009116514,"results":"49","hashOfConfig":"39"},{"size":941,"mtime":1613943134403,"results":"50","hashOfConfig":"39"},{"size":115,"mtime":1613426031997,"results":"51","hashOfConfig":"39"},{"size":1562,"mtime":1613729889015,"results":"52","hashOfConfig":"39"},{"size":453,"mtime":1609576513679,"results":"53","hashOfConfig":"39"},{"size":6735,"mtime":1609625902142,"results":"54","hashOfConfig":"39"},{"size":1075,"mtime":1613728606134,"results":"55","hashOfConfig":"39"},{"size":456,"mtime":1613833520469,"results":"56","hashOfConfig":"39"},{"size":466,"mtime":1609625822225,"results":"57","hashOfConfig":"39"},{"size":1879,"mtime":1614019701638,"results":"58","hashOfConfig":"39"},{"size":1079,"mtime":1614003978487,"results":"59","hashOfConfig":"39"},{"size":641,"mtime":1613426588165,"results":"60","hashOfConfig":"39"},{"size":790,"mtime":1614008583794,"results":"61","hashOfConfig":"39"},{"size":6079,"mtime":1614009614571,"results":"62","hashOfConfig":"39"},{"size":460,"mtime":1614009306996,"results":"63","hashOfConfig":"39"},{"size":6203,"mtime":1614019744643,"results":"64","hashOfConfig":"39"},{"size":475,"mtime":1614008724001,"results":"65","hashOfConfig":"39"},{"size":4755,"mtime":1614019896373,"results":"66","hashOfConfig":"39"},{"size":2450,"mtime":1614007387877,"results":"67","hashOfConfig":"39"},{"size":1103,"mtime":1613730836697,"results":"68","hashOfConfig":"39"},{"size":336,"mtime":1613727558080,"results":"69","hashOfConfig":"39"},{"size":3411,"mtime":1613834353457,"results":"70","hashOfConfig":"39"},{"size":5915,"mtime":1613991985279,"results":"71","hashOfConfig":"39"},{"size":1017,"mtime":1614007164541,"results":"72","hashOfConfig":"39"},{"size":10927,"mtime":1614020291697,"results":"73","hashOfConfig":"39"},{"size":2412,"mtime":1614009332368,"results":"74","hashOfConfig":"39"},{"size":2429,"mtime":1614019699677,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1v29g66",{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"78"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\index.tsx",[],["159","160"],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\App.tsx",["161"],"import React, {useEffect} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { loadUser } from './actions/userActions';\nimport NavBar from './components/NavBar';\nimport Routes from './components/routes/Routes';\nimport {ToastContainer} from 'react-toastify'\n\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadUser())\n  }, [])\n\n  return (\n    <React.Fragment>\n      <NavBar/>\n\n      <Routes/>\n\n      <ToastContainer position=\"bottom-right\" />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\RegisterForm.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\store.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\rootReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\layoutReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\layoutActionTypes.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\interfaces\\index.ts",[],["162","163"],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\layout\\Layout.tsx",["164"],"import React, {useEffect} from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport RegisterForm from \"../modals/RegisterForm\";\r\nimport {State} from '../../interfaces'\r\nimport LoginForm from '../modals/LoginForm';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst AuthenticateUser = () => {\r\n    const {formType} = useSelector((state:State) => state.layout);\r\n    const {isAuthenticated} = useSelector((state:State) => state.user);\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if(isAuthenticated){\r\n            history.push(\"/dashboard\");\r\n        }\r\n    }, [isAuthenticated])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container d-flex justify-content-center align-items-center layout-container\">\r\n                <div className=\"img-container\">\r\n                    <img src=\"/assets/illustration.svg\" className=\"img-fluid\" alt=\"Illustration\"/>\r\n                </div>\r\n\r\n                <div className=\"layout-text\">\r\n                    <h1>With Socialize you can</h1>\r\n                    <p className=\"d-flex justify-content-start align-items-center p-2 fs-3\">\r\n                        <span className=\"dot\"></span> Meet new people\r\n                    </p>\r\n                    <p className=\"d-flex justify-content-start align-items-center p-2 fs-3\">\r\n                        <span className=\"dot\"></span> Read others posts\r\n                    </p>\r\n                    <p className=\"d-flex justify-content-start align-items-center p-2 fs-3\">\r\n                        <span className=\"dot\"></span> Upload your own posts\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            {formType && formType === \"register\" && <RegisterForm/>}\r\n\r\n            {formType && formType === \"login\" && <LoginForm/>}\r\n\r\n            <footer className=\"container-fluid d-flex justify-content-start align-items-center px-4 fs-5\">\r\n                <p>Socialize &copy; 2021</p>\r\n            </footer>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default AuthenticateUser\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\NavBar.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\layoutActions.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\helper\\index.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\userActionTypes.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\userActions.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\interfaces\\layout.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\LoginForm.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\userReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\routes\\Routes.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\routes\\PrivateRoute.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\layout\\Dashboard.tsx",["165","166"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getFriendRequests, getFriends, getNotifications, getProfile } from '../../actions/profileActions'\r\nimport CreatePost from '../modals/CreatePost'\r\nimport Posts from '../post/Posts'\r\nimport SideNavLeft from '../sidenavs/SideNavLeft'\r\nimport SideNavRight from '../sidenavs/SideNavRight'\r\nimport {State} from '../../interfaces'\r\nimport { fetchPosts, getAllLikes } from '../../actions/postActions'\r\nimport CreateComment from '../modals/CreateComment'\r\nimport CreateAnswer from '../modals/CreateAnswer'\r\n\r\nconst Dashboard = () => {\r\n    const {token, user} = useSelector((state:State) => state.user) \r\n    const {profile} = useSelector((state:State) => state.profile)\r\n    const {showModal, modalType} = useSelector((state:State) => state.layout) \r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getProfile(token, user.id));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(profile.id !== 0){\r\n            dispatch(getAllLikes(token, user.id, profile.id));\r\n            dispatch(fetchPosts(token, user.id, profile.id));\r\n            dispatch(getFriends(token, user.id, profile.id));\r\n            dispatch(getFriendRequests(token, user.id, profile.id));\r\n            dispatch(getNotifications(token, user.id, profile.id));\r\n        }\r\n    }, [profile, dispatch])\r\n\r\n    return (\r\n        <div className=\"dashboard container\">\r\n            <React.Fragment>\r\n                <SideNavLeft/>\r\n\r\n                <SideNavRight/>\r\n            </React.Fragment>\r\n\r\n            {showModal && modalType === \"post\" && <CreatePost/>}\r\n\r\n            {showModal && modalType === \"comment\" && <CreateComment/>}\r\n\r\n            {showModal && modalType === \"answer\" && <CreateAnswer/>}\r\n\r\n            <Posts/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\SideNavLeft.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\SideNavRight.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\Posts.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\Post.tsx",["167"],"import React, {useEffect, useState} from 'react'\r\nimport { Post as PostObj } from '../../interfaces/post';\r\nimport {State} from '../../interfaces'\r\nimport Comments from './comment/Comments'\r\nimport Moment from 'react-moment'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { likePost, removePost, unlikePost, updatePost } from '../../actions/postActions';\r\nimport { openModal, setIdToUseInModal, setPostIndex } from '../../actions/layoutActions';\r\n\r\nconst Post = (props: {post: PostObj, post_index: number}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user, token} = useSelector((state: State) => state.user)\r\n    const {profile} = useSelector((state: State) => state.profile)\r\n    const {postsLiked, canClickLikeButton} = useSelector((state: State) => state.post)\r\n    const {modalType} = useSelector((state: State) => state.layout)\r\n\r\n    const [showComments, setShowComments] = useState(false);\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [postText, setPostText] = useState(props.post.post_text);\r\n    const [edit, setEdit] = useState(false)\r\n    const [isLiked, setIsLiked] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsLiked(postsLiked.findIndex(p => p.post_id === props.post.id) !== -1 ? true : false)\r\n    }, [postsLiked])\r\n\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        let post = {...props.post};\r\n        post.post_text = postText;\r\n\r\n        dispatch(updatePost(token, user.id, profile.id, post));\r\n\r\n        setEdit(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n\r\n            {props.post.profile_id === profile.id && <span className=\"options-button\" onClick={() => setShowOptions(!showOptions)}>\r\n                <i className=\"fas fa-ellipsis-h\"></i>\r\n            </span>}\r\n\r\n            {showOptions && <ul className=\"options shadow card\">\r\n                <li onClick={() => {\r\n                    setEdit(true);\r\n                    setShowOptions(false);\r\n                }}>Edit <i className=\"fas fa-edit\"></i></li>\r\n                <li onClick={() => {\r\n                        dispatch(removePost(token, user.id, profile.id, props.post.id))\r\n                        setShowOptions(false);\r\n                    }\r\n                }>Delete <i className=\"fas fa-trash-alt\"></i></li>\r\n            </ul>}\r\n\r\n            <div className=\"card-body\">\r\n                <div className=\"posted-by\">\r\n                    <img src=\"/assets/user.png\" className=\"img-fluid\" alt=\"Default User\"/> {props.post.username} \r\n                    <span className=\"time-posted\"><Moment format=\"D MMMM YYYY hh:mm\">{props.post.created_at}</Moment></span>\r\n                </div>\r\n\r\n                {!edit && <p className=\"card-text\">\r\n                    {props.post.post_text}\r\n                </p>}\r\n\r\n                {edit && \r\n                    <form className=\"clearfix update-form\" onSubmit={onSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <textarea\r\n                                className=\"form-control\"\r\n                                rows={4}\r\n                                value={postText} \r\n                                onChange={e => setPostText(e.target.value)}\r\n                                required\r\n                            >\r\n                            </textarea>\r\n\r\n                            <div className=\"buttons float-end\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setEdit(false)}>Cancel</button>\r\n\r\n                                <button type=\"submit\" className=\"btn btn-primary\">Update</button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                }\r\n\r\n                <div className=\"post-icons\">\r\n                    <span>\r\n                        <span \r\n                            style={isLiked ? {color: 'var(--bs-primary)'} : {}} \r\n                            onClick={() => {\r\n                                if(!canClickLikeButton){\r\n                                    return;\r\n                                }\r\n\r\n                                if(!isLiked){\r\n                                    dispatch(likePost(token, user.id, profile.id, props.post.id));\r\n                                    setIsLiked(true);\r\n                                }else{\r\n                                    dispatch(unlikePost(token, user.id, profile.id, props.post.id));\r\n                                    setIsLiked(false);\r\n                                }\r\n                            }}\r\n                        >\r\n                            <i className=\"fas fa-thumbs-up\"></i> Like\r\n                        </span> \r\n                        <span className=\"badge bg-primary\">{props.post.likes}</span>\r\n                    </span>\r\n\r\n                    <span>\r\n                        <span onClick={() => {\r\n                            if(modalType !== \"\"){\r\n                                return;\r\n                            }\r\n\r\n                            dispatch(openModal(\"comment\"))\r\n                            dispatch(setIdToUseInModal(props.post.id));\r\n                            dispatch(setPostIndex(props.post_index));\r\n                        }}>\r\n                            <i className=\"far fa-comments\"></i> Comments\r\n                        </span> \r\n                        <span className=\"badge bg-primary\">{props.post.comments.length}</span>\r\n                    </span>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {showComments && <Comments comments={props.post.comments} post_index={props.post_index}/>}\r\n\r\n            {props.post.comments.length > 0 && <button \r\n                className=\"btn text-primary border border-primary show-comments\" \r\n                onClick={() => setShowComments(!showComments)}\r\n            >\r\n                {!showComments ? \"Show Comments +\" : \"Hide Comments -\"}\r\n            </button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\comment\\Comments.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\comment\\Comment.tsx",["168"],"import React, {useEffect, useState} from 'react'\r\nimport { Comment as CommentObj } from '../../../interfaces/post';\r\nimport Answers from '../answer/Answers'\r\nimport Moment from 'react-moment';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { State } from '../../../interfaces';\r\nimport { likeComment, removeComment, unlikeComment, updateComment } from '../../../actions/postActions';\r\nimport { openModal, setCommentIndex, setIdToUseInModal, setPostIndex } from '../../../actions/layoutActions';\r\n\r\nconst Comment = (props: {comment: CommentObj, post_index: number, comment_index: number}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user, token} = useSelector((state: State) => state.user)\r\n    const {profile} = useSelector((state: State) => state.profile)\r\n    const {commentsLiked, canClickLikeButton} = useSelector((state: State) => state.post)\r\n    const {modalType} = useSelector((state: State) => state.layout)\r\n\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [showAnswers, setShowAnswers] = useState(false);\r\n    const [commentText, setCommentText] = useState(props.comment.comment_text);\r\n    const [edit, setEdit] = useState(false)\r\n    const [isLiked, setIsLiked] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        setIsLiked(commentsLiked.findIndex(c => c.comment_id === props.comment.id) !== -1 ? true : false)\r\n    }, [commentsLiked])\r\n\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        let comment = {...props.comment};\r\n        comment.comment_text = commentText;\r\n\r\n        dispatch(updateComment(token, user.id, profile.id, comment, props.post_index));\r\n\r\n        setEdit(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card-body comment\">\r\n            {props.comment.profile_id === profile.id && <span className=\"options-button\" onClick={() => setShowOptions(!showOptions)}>\r\n                <i className=\"fas fa-ellipsis-h\"></i>\r\n            </span>}\r\n\r\n            {showOptions && <ul className=\"options shadow card\">\r\n                <li onClick={() => {\r\n                    setEdit(true);\r\n                    setShowOptions(false);\r\n                }}>Edit <i className=\"fas fa-edit\"></i></li>\r\n                <li onClick={() => {\r\n                        dispatch(removeComment(token, user.id, profile.id, props.comment.id, props.post_index))\r\n                        setShowOptions(false);\r\n                    }\r\n                }>Delete <i className=\"fas fa-trash-alt\"></i></li>\r\n            </ul>}\r\n\r\n            <div className=\"posted-by\">\r\n                <img src=\"/assets/user.png\" className=\"img-fluid\" alt=\"Default User\"/> {props.comment.username} \r\n                <span className=\"time-posted\"><Moment format=\"D MMMM YYYY hh:mm\">{props.comment.created_at}</Moment></span>\r\n            </div>\r\n\r\n            {!edit && <p className=\"card-text\">\r\n                {props.comment.comment_text}\r\n            </p>}\r\n\r\n            {edit && \r\n                <form className=\"clearfix update-form\" onSubmit={onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <textarea\r\n                            className=\"form-control\"\r\n                            rows={4}\r\n                            value={commentText} \r\n                            onChange={e => setCommentText(e.target.value)}\r\n                            required\r\n                        >\r\n                        </textarea>\r\n\r\n                        <div className=\"buttons float-end\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setEdit(false)}>Cancel</button>\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Update</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            }\r\n\r\n            <div className=\"post-icons\">\r\n                <span>\r\n                    <span \r\n                        style={isLiked ? {color: 'var(--bs-primary)'} : {}} \r\n                        onClick={() => {\r\n                            if(!canClickLikeButton){\r\n                                return;\r\n                            }\r\n\r\n                            if(!isLiked){\r\n                                dispatch(likeComment(token, user.id, profile.id, props.comment.id, props.post_index));\r\n                                setIsLiked(true);\r\n                            }else{\r\n                                dispatch(unlikeComment(token, user.id, profile.id, props.comment.id, props.post_index));\r\n                                setIsLiked(false);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <i className=\"fas fa-thumbs-up\"></i> Like\r\n                    </span> \r\n                    <span className=\"badge bg-primary\">{props.comment.likes}</span>\r\n                </span>\r\n\r\n                <span>\r\n                    <span onClick={() => {\r\n                            if(modalType !== \"\"){\r\n                                return;\r\n                            }\r\n\r\n                            dispatch(openModal(\"answer\"))\r\n                            dispatch(setIdToUseInModal(props.comment.id));\r\n                            dispatch(setPostIndex(props.post_index));\r\n                            dispatch(setCommentIndex(props.comment_index))\r\n                        }}>\r\n                        <i className=\"far fa-comments\"></i> Answers\r\n                    </span> \r\n                    <span className=\"badge bg-primary\">{props.comment.answers.length}</span>\r\n                </span>\r\n            </div>\r\n\r\n            {showAnswers && <Answers answers={props.comment.answers} comment_index={props.comment_index} post_index={props.post_index} />}\r\n\r\n            {props.comment.answers.length > 0 && <button \r\n                className=\"btn btn-outline-warning bg-white text-warning border border-warning show-answers\" \r\n                onClick={() => setShowAnswers(!showAnswers)}\r\n            >\r\n                {!showAnswers ? \"Show Answers +\" : \"Hide Answers -\"}\r\n            </button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\answer\\Answers.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\answer\\Answer.tsx",["169"],"import React, { useEffect, useState } from 'react'\r\nimport { Answer as AnswerObj } from '../../../interfaces/post'\r\nimport Moment from 'react-moment'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { State } from '../../../interfaces';\r\nimport { likeAnswer, removeAnswer, unlikeAnswer, updateAnswer } from '../../../actions/postActions';\r\n\r\nconst Answer = (props: {answer: AnswerObj, post_index: number, comment_index: number}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user, token} = useSelector((state: State) => state.user)\r\n    const {profile} = useSelector((state: State) => state.profile)\r\n    const {answersLiked, canClickLikeButton} = useSelector((state: State) => state.post)\r\n\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [answerText, setAnswerText] = useState(props.answer.answer_text);\r\n    const [edit, setEdit] = useState(false)\r\n    const [isLiked, setIsLiked] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        setIsLiked(answersLiked.findIndex(a => a.answer_id === props.answer.id) !== -1 ? true : false)\r\n    }, [answersLiked])\r\n\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        let answer = {...props.answer};\r\n        answer.answer_text = answerText;\r\n\r\n        dispatch(updateAnswer(token, user.id, profile.id, answer, props.post_index, props.comment_index));\r\n\r\n        setEdit(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card-body answer\">\r\n            {props.answer.profile_id === profile.id && <span className=\"options-button\" onClick={() => setShowOptions(!showOptions)}>\r\n                <i className=\"fas fa-ellipsis-h\"></i>\r\n            </span>}\r\n\r\n            {showOptions && <ul className=\"options shadow card\">\r\n                <li onClick={() => {\r\n                    setEdit(true);\r\n                    setShowOptions(false);\r\n                }}>Edit <i className=\"fas fa-edit\"></i></li>\r\n                <li onClick={() => {\r\n                        dispatch(removeAnswer(token, user.id, profile.id, props.answer.id, props.post_index, props.comment_index))\r\n                        setShowOptions(false);\r\n                    }\r\n                }>Delete <i className=\"fas fa-trash-alt\"></i></li>\r\n            </ul>}\r\n\r\n            <div className=\"posted-by\">\r\n                <img src=\"/assets/user.png\" className=\"img-fluid\" alt=\"Default User\"/> {props.answer.username} \r\n                <span className=\"time-posted\"><Moment format=\"D MMMM YYYY hh:mm\">{props.answer.created_at}</Moment></span>\r\n            </div>\r\n\r\n            {!edit && <p className=\"card-text\">\r\n                {props.answer.answer_text}\r\n            </p>}\r\n\r\n            {edit && \r\n                <form className=\"clearfix update-form\" onSubmit={onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <textarea\r\n                            className=\"form-control\"\r\n                            rows={4}\r\n                            value={answerText} \r\n                            onChange={e => setAnswerText(e.target.value)}\r\n                            required\r\n                        >\r\n                        </textarea>\r\n\r\n                        <div className=\"buttons float-end\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setEdit(false)}>Cancel</button>\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Update</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            }\r\n\r\n            <div className=\"post-icons\">\r\n                <span>\r\n                    <span\r\n                        style={isLiked ? {color: 'var(--bs-primary)'} : {}} \r\n                        onClick={() => {\r\n                            if(!canClickLikeButton){\r\n                                return;\r\n                            }\r\n\r\n                            if(!isLiked){\r\n                                dispatch(likeAnswer(token, user.id, profile.id, props.answer.id, props.post_index, props.comment_index));\r\n                                setIsLiked(true);\r\n                            }else{\r\n                                dispatch(unlikeAnswer(token, user.id, profile.id, props.answer.id, props.post_index, props.comment_index));\r\n                                setIsLiked(false);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <i className=\"fas fa-thumbs-up\"></i> Like\r\n                    </span> \r\n                    <span className=\"badge bg-primary\">{props.answer.likes}</span>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Answer\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreatePost.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\profileReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\profileActionTypes.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\profileActions.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\postReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\postActionTypes.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\postActions.ts",["170"],"import {Dispatch} from \"redux\"\r\nimport {toast} from 'react-toastify'\r\nimport { getAxiosConfig, API, getAxiosBody } from \"../helper\"\r\nimport axios from \"axios\"\r\nimport { \r\n    CAN_CLICK_LIKE_BUTTON, \r\n    CREATE_ANSWER, \r\n    CREATE_COMMENT, \r\n    CREATE_POST, \r\n    FETCH_POSTS, \r\n    GET_ALL_LIKES, \r\n    LIKE_ANSWER, \r\n    LIKE_BUTTON_CLICKED, \r\n    LIKE_COMMENT, \r\n    LIKE_POST, \r\n    POSTS_LOADING, \r\n    REMOVE_ANSWER, \r\n    REMOVE_COMMENT, \r\n    REMOVE_POST, \r\n    UNLIKE_ANSWER, \r\n    UNLIKE_COMMENT, \r\n    UNLIKE_POST, \r\n    UPDATE_ANSWER, \r\n    UPDATE_COMMENT, \r\n    UPDATE_POST \r\n} from \"../actionTypes/postActionTypes\"\r\nimport { Post, Comment, Answer } from \"../interfaces/post\"\r\n\r\n// Post Actions\r\nexport const fetchPosts = (token: string, userId: number, profileId: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            dispatch({type: POSTS_LOADING});\r\n\r\n            const config = getAxiosConfig(token, false);\r\n\r\n            const res = await axios.get(`${API}/posts/${userId}/${profileId}`, config);\r\n\r\n            dispatch({type: FETCH_POSTS, payload: {posts: res.data}})\r\n        } catch (err) {\r\n            toast.error(\"Posts couldn't be fetched\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const createPost = (token: string, userId: number, profileId: number, postText: string, postImage: string, postVideo: string) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            const config = getAxiosConfig(token);\r\n            const body = getAxiosBody({postText, postImage, postVideo})\r\n\r\n            const res = await axios.post(`${API}/posts/${userId}/${profileId}`, body, config);\r\n\r\n            dispatch({type: CREATE_POST, payload: {post: res.data}})\r\n        } catch (err) {\r\n            toast.error(\"Post couldn't be created\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const updatePost = (token: string, userId: number, profileId: number, post: Post) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            const config = getAxiosConfig(token);\r\n            const body = getAxiosBody({postText: post.post_text, postImage: post.post_image, postVideo: post.post_video})\r\n\r\n            await axios.put(`${API}/posts/${post.id}/${userId}/${profileId}`, body, config);\r\n\r\n            dispatch({type: UPDATE_POST, payload: {post}})\r\n        } catch (err) {\r\n            toast.error(\"Post couldn't be updated\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const removePost = (token: string, userId: number, profileId: number, postId: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            const config = getAxiosConfig(token, false);\r\n\r\n            await axios.delete(`${API}/posts/${postId}/${userId}/${profileId}`, config);\r\n\r\n            dispatch({type: REMOVE_POST, payload: {id: postId}})\r\n        } catch (err) {\r\n            toast.error(\"Post couldn't be removed\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const likePost = (token: string, userId: number, profileId: number, postId: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            dispatch({type: LIKE_BUTTON_CLICKED});\r\n\r\n            const config = getAxiosConfig(token, false);\r\n\r\n            await axios.put(`${API}/posts/${postId}/like/${userId}/${profileId}`, null,  config);\r\n\r\n            dispatch({type: LIKE_POST, payload: {id: postId}})\r\n        } catch (err) {\r\n            toast.error(\"Post couldn't be liked\");\r\n        }finally{\r\n            dispatch({type: CAN_CLICK_LIKE_BUTTON});\r\n        }\r\n    }\r\n}\r\n\r\nexport const unlikePost = (token: string, userId: number, profileId: number, postId: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            dispatch({type: LIKE_BUTTON_CLICKED});\r\n\r\n            const config = getAxiosConfig(token, false);\r\n\r\n            await axios.put(`${API}/posts/${postId}/unlike/${userId}/${profileId}`, null,  config);\r\n\r\n            dispatch({type: UNLIKE_POST, payload: {id: postId}})\r\n        } catch (err) {\r\n            toast.error(\"Post couldn't be liked\");\r\n        }finally{\r\n            dispatch({type: CAN_CLICK_LIKE_BUTTON});\r\n        }\r\n    }\r\n}\r\n\r\nexport const getAllLikes = (token: string, userId: number, profileId: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            const config = getAxiosConfig(token, false);\r\n\r\n            const res = await axios.get(`${API}/posts/get_all_likes/${userId}/${profileId}`, config);\r\n\r\n            dispatch({type: GET_ALL_LIKES, payload: res.data})\r\n        } catch (err) {\r\n            toast.error(\"Likes couldn't be fetched\");\r\n        }\r\n    }\r\n}\r\n\r\n// Comment Actions\r\nexport const createComment = (token: string, userId: number, profileId: number, commentText: string, postId: number, post_index: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            const config = getAxiosConfig(token);\r\n            const body = getAxiosBody({commentText})\r\n\r\n            const res = await axios.post(`${API}/comments/${postId}/${userId}/${profileId}`, body, config);\r\n\r\n            dispatch({type: CREATE_COMMENT, payload: {comment: res.data, post_index}})\r\n        } catch (err) {\r\n            toast.error(\"Comment couldn't be created\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateComment = (token: string, userId: number, profileId: number, comment: Comment, post_index: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            const config = getAxiosConfig(token);\r\n            const body = getAxiosBody({commentText: comment.comment_text})\r\n\r\n            await axios.put(`${API}/comments/${comment.id}/${userId}/${profileId}`, body, config);\r\n\r\n            dispatch({type: UPDATE_COMMENT, payload: {comment, post_index}})\r\n        } catch (err) {\r\n            toast.error(\"Comment couldn't be updated\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeComment = (token: string, userId: number, profileId: number, commentId: number, post_index: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            const config = getAxiosConfig(token, false);\r\n\r\n            await axios.delete(`${API}/comments/${commentId}/${userId}/${profileId}`, config);\r\n\r\n            dispatch({type: REMOVE_COMMENT, payload: {id: commentId, post_index}})\r\n        } catch (err) {\r\n            toast.error(\"Comment couldn't be removed\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const likeComment = (token: string, userId: number, profileId: number, commentId: number, post_index: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            dispatch({type: LIKE_BUTTON_CLICKED});\r\n\r\n            const config = getAxiosConfig(token, false);\r\n\r\n            await axios.put(`${API}/comments/${commentId}/like/${userId}/${profileId}`, null,  config);\r\n\r\n            dispatch({type: LIKE_COMMENT, payload: {id: commentId, post_index}})\r\n        } catch (err) {\r\n            toast.error(\"Comment couldn't be liked\");\r\n        }finally{\r\n            dispatch({type: CAN_CLICK_LIKE_BUTTON});\r\n        }\r\n    }\r\n}\r\n\r\nexport const unlikeComment = (token: string, userId: number, profileId: number, commentId: number, post_index: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            dispatch({type: LIKE_BUTTON_CLICKED});\r\n\r\n            const config = getAxiosConfig(token, false);\r\n\r\n            await axios.put(`${API}/comments/${commentId}/unlike/${userId}/${profileId}`, null,  config);\r\n\r\n            dispatch({type: UNLIKE_COMMENT, payload: {id: commentId, post_index}})\r\n        } catch (err) {\r\n            toast.error(\"Comment couldn't be liked\");\r\n        }finally{\r\n            dispatch({type: CAN_CLICK_LIKE_BUTTON});\r\n        }\r\n    }\r\n}\r\n\r\n// Answer Actions\r\nexport const createAnswer = \r\n(token: string, userId: number, profileId: number, answerText: string, commentId: number, post_index: number, comment_index: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            const config = getAxiosConfig(token);\r\n            const body = getAxiosBody({answerText})\r\n\r\n            const res = await axios.post(`${API}/answers/${commentId}/${userId}/${profileId}`, body, config);\r\n\r\n            dispatch({type: CREATE_ANSWER, payload: {answer: res.data, post_index, comment_index}})\r\n        } catch (err) {\r\n            toast.error(\"Answer couldn't be created\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateAnswer = \r\n(token: string, userId: number, profileId: number, answer: Answer, post_index: number, comment_index: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            const config = getAxiosConfig(token);\r\n            const body = getAxiosBody({answerText: answer.answer_text})\r\n\r\n            const res = await axios.put(`${API}/answers/${answer.id}/${userId}/${profileId}`, body, config);\r\n\r\n            dispatch({type: UPDATE_ANSWER, payload: {answer: answer, post_index, comment_index}})\r\n        } catch (err) {\r\n            toast.error(\"Answer couldn't be updated\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeAnswer = \r\n(token: string, userId: number, profileId: number, answerId: number, post_index: number, comment_index: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            const config = getAxiosConfig(token, false);\r\n\r\n            await axios.delete(`${API}/answers/${answerId}/${userId}/${profileId}`, config);\r\n\r\n            dispatch({type: REMOVE_ANSWER, payload: {id: answerId, post_index, comment_index}})\r\n        } catch (err) {\r\n            toast.error(\"Comment couldn't be removed\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const likeAnswer = \r\n(token: string, userId: number, profileId: number, answerId: number, post_index: number, comment_index: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            dispatch({type: LIKE_BUTTON_CLICKED});\r\n\r\n            const config = getAxiosConfig(token, false);\r\n\r\n            await axios.put(`${API}/answers/${answerId}/like/${userId}/${profileId}`, null,  config);\r\n\r\n            dispatch({type: LIKE_ANSWER, payload: {id: answerId, post_index, comment_index}})\r\n        } catch (err) {\r\n            toast.error(\"Answer couldn't be liked\");\r\n        }finally{\r\n            dispatch({type: CAN_CLICK_LIKE_BUTTON});\r\n        }\r\n    }\r\n}\r\n\r\nexport const unlikeAnswer = \r\n(token: string, userId: number, profileId: number, answerId: number, post_index: number, comment_index: number) => {\r\n    return async (dispatch:Dispatch) => {\r\n        try {\r\n            dispatch({type: LIKE_BUTTON_CLICKED});\r\n\r\n            const config = getAxiosConfig(token, false);\r\n\r\n            await axios.put(`${API}/answers/${answerId}/unlike/${userId}/${profileId}`, null,  config);\r\n\r\n            dispatch({type: UNLIKE_ANSWER, payload: {id: answerId, post_index, comment_index}})\r\n        } catch (err) {\r\n            toast.error(\"Answer couldn't be liked\");\r\n        }finally{\r\n            dispatch({type: CAN_CLICK_LIKE_BUTTON});\r\n        }\r\n    }\r\n}","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreateComment.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreateAnswer.tsx",[],{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":14,"column":6,"nodeType":"177","endLine":14,"endColumn":8,"suggestions":"178"},{"ruleId":"171","replacedBy":"179"},{"ruleId":"173","replacedBy":"180"},{"ruleId":"175","severity":1,"message":"181","line":18,"column":8,"nodeType":"177","endLine":18,"endColumn":25,"suggestions":"182"},{"ruleId":"175","severity":1,"message":"183","line":21,"column":8,"nodeType":"177","endLine":21,"endColumn":10,"suggestions":"184"},{"ruleId":"175","severity":1,"message":"185","line":31,"column":8,"nodeType":"177","endLine":31,"endColumn":27,"suggestions":"186"},{"ruleId":"175","severity":1,"message":"187","line":26,"column":8,"nodeType":"177","endLine":26,"endColumn":20,"suggestions":"188"},{"ruleId":"175","severity":1,"message":"189","line":26,"column":8,"nodeType":"177","endLine":26,"endColumn":23,"suggestions":"190"},{"ruleId":"175","severity":1,"message":"191","line":22,"column":8,"nodeType":"177","endLine":22,"endColumn":22,"suggestions":"192"},{"ruleId":"193","severity":1,"message":"194","line":245,"column":19,"nodeType":"195","messageId":"196","endLine":245,"endColumn":22},"no-native-reassign",["197"],"no-negated-in-lhs",["198"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["199"],["197"],["198"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["200"],"React Hook useEffect has missing dependencies: 'dispatch', 'token', and 'user.id'. Either include them or remove the dependency array.",["201"],"React Hook useEffect has missing dependencies: 'token' and 'user.id'. Either include them or remove the dependency array.",["202"],"React Hook useEffect has a missing dependency: 'props.post.id'. Either include it or remove the dependency array. If 'setIsLiked' needs the current value of 'props.post.id', you can also switch to useReducer instead of useState and read 'props.post.id' in the reducer.",["203"],"React Hook useEffect has a missing dependency: 'props.comment.id'. Either include it or remove the dependency array. If 'setIsLiked' needs the current value of 'props.comment.id', you can also switch to useReducer instead of useState and read 'props.comment.id' in the reducer.",["204"],"React Hook useEffect has a missing dependency: 'props.answer.id'. Either include it or remove the dependency array. If 'setIsLiked' needs the current value of 'props.answer.id', you can also switch to useReducer instead of useState and read 'props.answer.id' in the reducer.",["205"],"@typescript-eslint/no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},"Update the dependencies array to be: [dispatch]",{"range":"220","text":"221"},"Update the dependencies array to be: [history, isAuthenticated]",{"range":"222","text":"223"},"Update the dependencies array to be: [dispatch, token, user.id]",{"range":"224","text":"225"},"Update the dependencies array to be: [profile, dispatch, token, user.id]",{"range":"226","text":"227"},"Update the dependencies array to be: [postsLiked, props.post.id]",{"range":"228","text":"229"},"Update the dependencies array to be: [commentsLiked, props.comment.id]",{"range":"230","text":"231"},"Update the dependencies array to be: [answersLiked, props.answer.id]",{"range":"232","text":"233"},[374,376],"[dispatch]",[598,615],"[history, isAuthenticated]",[966,968],"[dispatch, token, user.id]",[1374,1393],"[profile, dispatch, token, user.id]",[1284,1296],"[postsLiked, props.post.id]",[1391,1406],"[commentsLiked, props.comment.id]",[1093,1107],"[answersLiked, props.answer.id]"]