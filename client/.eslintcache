[{"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\index.tsx":"1","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\App.tsx":"2","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\RegisterForm.tsx":"3","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\store.ts":"4","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\rootReducer.ts":"5","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\layoutReducer.ts":"6","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\layoutActionTypes.ts":"7","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\interfaces\\index.ts":"8","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\layout\\Layout.tsx":"9","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\NavBar.tsx":"10","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\layoutActions.ts":"11","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\helper\\index.ts":"12","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\userActionTypes.ts":"13","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\userActions.ts":"14","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\interfaces\\layout.ts":"15","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\LoginForm.tsx":"16","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\userReducer.ts":"17","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\routes\\Routes.tsx":"18","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\routes\\PrivateRoute.tsx":"19","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\layout\\Dashboard.tsx":"20","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\SideNavLeft.tsx":"21","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\SideNavRight.tsx":"22","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\Posts.tsx":"23","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\Post.tsx":"24","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\comment\\Comments.tsx":"25","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\comment\\Comment.tsx":"26","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\answer\\Answers.tsx":"27","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\answer\\Answer.tsx":"28","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreatePost.tsx":"29","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\profileReducer.ts":"30","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\profileActionTypes.ts":"31","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\profileActions.ts":"32","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\postReducer.ts":"33","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\postActionTypes.ts":"34","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\postActions.ts":"35","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreateComment.tsx":"36","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreateAnswer.tsx":"37","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\SearchProfile.tsx":"38","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\Profile.tsx":"39","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\SearchedProfileResults.tsx":"40","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\SearchResult.tsx":"41","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\RequestButton.tsx":"42"},{"size":483,"mtime":1613834219448,"results":"43","hashOfConfig":"44"},{"size":665,"mtime":1616358910548,"results":"45","hashOfConfig":"44"},{"size":10759,"mtime":1609624804606,"results":"46","hashOfConfig":"44"},{"size":310,"mtime":1609576083471,"results":"47","hashOfConfig":"44"},{"size":398,"mtime":1613836925115,"results":"48","hashOfConfig":"44"},{"size":2484,"mtime":1617264187079,"results":"49","hashOfConfig":"44"},{"size":538,"mtime":1614009019579,"results":"50","hashOfConfig":"44"},{"size":94,"mtime":1609453140940,"results":"51","hashOfConfig":"52"},{"size":2054,"mtime":1617197066500,"results":"53","hashOfConfig":"44"},{"size":3439,"mtime":1618688109808,"results":"54","hashOfConfig":"44"},{"size":1427,"mtime":1614009116514,"results":"55","hashOfConfig":"44"},{"size":539,"mtime":1617180792068,"results":"56","hashOfConfig":"44"},{"size":152,"mtime":1617263913255,"results":"57","hashOfConfig":"44"},{"size":2380,"mtime":1617265366354,"results":"58","hashOfConfig":"44"},{"size":453,"mtime":1609576513679,"results":"59","hashOfConfig":"52"},{"size":6757,"mtime":1615450690334,"results":"60","hashOfConfig":"44"},{"size":952,"mtime":1617264148877,"results":"61","hashOfConfig":"44"},{"size":582,"mtime":1617140661569,"results":"62","hashOfConfig":"44"},{"size":466,"mtime":1609625822225,"results":"63","hashOfConfig":"44"},{"size":2471,"mtime":1618856813487,"results":"64","hashOfConfig":"44"},{"size":1363,"mtime":1618688731152,"results":"65","hashOfConfig":"44"},{"size":1402,"mtime":1618475165904,"results":"66","hashOfConfig":"44"},{"size":790,"mtime":1617178023278,"results":"67","hashOfConfig":"44"},{"size":6753,"mtime":1618471529273,"results":"68","hashOfConfig":"44"},{"size":460,"mtime":1614009306996,"results":"69","hashOfConfig":"44"},{"size":6168,"mtime":1615475379004,"results":"70","hashOfConfig":"44"},{"size":475,"mtime":1614008724001,"results":"71","hashOfConfig":"44"},{"size":4720,"mtime":1615475406062,"results":"72","hashOfConfig":"44"},{"size":2436,"mtime":1616410635099,"results":"73","hashOfConfig":"44"},{"size":3679,"mtime":1618856152491,"results":"74","hashOfConfig":"44"},{"size":1122,"mtime":1618776198799,"results":"75","hashOfConfig":"44"},{"size":9388,"mtime":1618856059658,"results":"76","hashOfConfig":"44"},{"size":6212,"mtime":1617264175504,"results":"77","hashOfConfig":"44"},{"size":1017,"mtime":1614007164541,"results":"78","hashOfConfig":"44"},{"size":10385,"mtime":1617181119188,"results":"79","hashOfConfig":"44"},{"size":2398,"mtime":1615475303211,"results":"80","hashOfConfig":"44"},{"size":2415,"mtime":1615475314882,"results":"81","hashOfConfig":"44"},{"size":3528,"mtime":1618688399855,"results":"82","hashOfConfig":"44"},{"size":5201,"mtime":1618857812736,"results":"83","hashOfConfig":"44"},{"size":972,"mtime":1618692349675,"results":"84","hashOfConfig":"44"},{"size":1352,"mtime":1618857732954,"results":"85","hashOfConfig":"44"},{"size":3135,"mtime":1618857901398,"results":"86","hashOfConfig":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"j3aqje",{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"89"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"1v29g66",{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"89"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"89"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"89"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"89"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"89"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\index.tsx",[],["182","183"],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\App.tsx",["184"],"import React, {useEffect} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { verifyUser } from './actions/userActions';\nimport NavBar from './components/NavBar';\nimport Routes from './components/routes/Routes';\nimport {ToastContainer} from 'react-toastify'\nimport { State } from './interfaces';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const {user} = useSelector((state: State) => state.user)\n\n  useEffect(() => {\n    dispatch(verifyUser(user.id));\n  }, [])\n\n  return (\n    <React.Fragment>\n      <NavBar/>\n\n      <Routes/>\n\n      <ToastContainer position=\"bottom-right\" />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\RegisterForm.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\store.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\rootReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\layoutReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\layoutActionTypes.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\interfaces\\index.ts",[],["185","186"],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\layout\\Layout.tsx",["187"],"import React, {useEffect} from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport RegisterForm from \"../modals/RegisterForm\";\r\nimport {State} from '../../interfaces'\r\nimport LoginForm from '../modals/LoginForm';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst AuthenticateUser = () => {\r\n    const {formType} = useSelector((state:State) => state.layout);\r\n    const {isAuthenticated} = useSelector((state:State) => state.user);\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if(isAuthenticated){\r\n            history.push(\"/dashboard\");\r\n        }\r\n    }, [isAuthenticated])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container d-flex justify-content-center align-items-center layout-container\">\r\n                <div className=\"img-container\">\r\n                    <img src=\"/assets/illustration.svg\" className=\"img-fluid\" alt=\"Illustration\"/>\r\n                </div>\r\n\r\n                <div className=\"layout-text\">\r\n                    <h1>With Socialize you can</h1>\r\n                    <p className=\"d-flex justify-content-start align-items-center p-2 fs-3\">\r\n                        <span className=\"dot\"></span> Meet new people\r\n                    </p>\r\n                    <p className=\"d-flex justify-content-start align-items-center p-2 fs-3\">\r\n                        <span className=\"dot\"></span> Read others posts\r\n                    </p>\r\n                    <p className=\"d-flex justify-content-start align-items-center p-2 fs-3\">\r\n                        <span className=\"dot\"></span> Upload your own posts\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            {formType && formType === \"register\" && <RegisterForm/>}\r\n\r\n            {formType && formType === \"login\" && <LoginForm/>}\r\n\r\n            <footer className=\"container-fluid d-flex justify-content-start align-items-center px-4 fs-5\">\r\n                <p>Socialize &copy; 2021</p>\r\n            </footer>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default AuthenticateUser\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\NavBar.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\layoutActions.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\helper\\index.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\userActionTypes.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\userActions.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\interfaces\\layout.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\LoginForm.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\userReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\routes\\Routes.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\routes\\PrivateRoute.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\layout\\Dashboard.tsx",["188","189"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getFriendRequests, getFriends, getNotifications, getProfile, getSendedFriendRequests, setCurrentProfileUsername } from '../../actions/profileActions'\r\nimport CreatePost from '../modals/CreatePost'\r\nimport Posts from '../post/Posts'\r\nimport SideNavLeft from '../sidenavs/SideNavLeft'\r\nimport SideNavRight from '../sidenavs/SideNavRight'\r\nimport {State} from '../../interfaces'\r\nimport { fetchPosts, getAllLikes } from '../../actions/postActions'\r\nimport CreateComment from '../modals/CreateComment'\r\nimport CreateAnswer from '../modals/CreateAnswer'\r\nimport SearchProfile from '../modals/SearchProfile'\r\nimport SearchedProfileResults from '../profile/SearchedProfileResults'\r\n\r\nconst Dashboard = () => {\r\n    const {user} = useSelector((state:State) => state.user) \r\n    const {profile, showSearchingResults} = useSelector((state:State) => state.profile)\r\n    const {showModal, modalType} = useSelector((state:State) => state.layout) \r\n    const dispatch = useDispatch();\r\n\r\n    const [showSearchProfile, setShowSearchProfile] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(getProfile(user.id));\r\n        dispatch(setCurrentProfileUsername(null));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(profile.id !== 0){\r\n            dispatch(getAllLikes(user.id, profile.id));\r\n            dispatch(fetchPosts(user.id, profile.id));\r\n            dispatch(getFriends(user.id, profile.id));\r\n            dispatch(getFriendRequests(user.id, profile.id));\r\n            dispatch(getSendedFriendRequests(user.id, profile.id));\r\n            dispatch(getNotifications(user.id, profile.id));\r\n        }\r\n    }, [profile, dispatch])\r\n\r\n    return (\r\n        <div className=\"dashboard container\">\r\n            <React.Fragment>\r\n                <SideNavLeft setShowSearchProfile={setShowSearchProfile}/>\r\n\r\n                <SideNavRight/>\r\n            </React.Fragment>\r\n\r\n            {showModal && modalType === \"post\" && <CreatePost/>}\r\n\r\n            {showModal && modalType === \"comment\" && <CreateComment/>}\r\n\r\n            {showModal && modalType === \"answer\" && <CreateAnswer/>}\r\n\r\n            {showSearchProfile && <SearchProfile setShowSearchProfile={setShowSearchProfile}/>}\r\n\r\n            {showSearchingResults && <SearchedProfileResults/>}\r\n\r\n            {!showSearchingResults && <Posts/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\SideNavLeft.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\sidenavs\\SideNavRight.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\Posts.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\Post.tsx",["190","191"],"import React, {useEffect, useState} from 'react'\r\nimport { Post as PostObj } from '../../interfaces/post';\r\nimport {State} from '../../interfaces'\r\nimport Comments from './comment/Comments'\r\nimport Moment from 'react-moment'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { likePost, removePost, unlikePost, updatePost } from '../../actions/postActions';\r\nimport { openModal, setIdToUseInModal, setPostIndex } from '../../actions/layoutActions';\r\nimport { useHistory } from 'react-router';\r\nimport { fetchCurrentProfile, setCurrentProfileUsername } from '../../actions/profileActions';\r\n\r\nconst Post = (props: {post: PostObj, post_index: number}) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const {user} = useSelector((state: State) => state.user)\r\n    const {profile} = useSelector((state: State) => state.profile)\r\n    const {postsLiked, canClickLikeButton} = useSelector((state: State) => state.post)\r\n    const {modalType} = useSelector((state: State) => state.layout)\r\n    const {currentProfile} = useSelector((state: State) => state.profile)\r\n\r\n    const [showComments, setShowComments] = useState(false);\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [postText, setPostText] = useState(props.post.post_text);\r\n    const [edit, setEdit] = useState(false)\r\n    const [isLiked, setIsLiked] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsLiked(postsLiked.findIndex(p => p.post_id === props.post.id) !== -1 ? true : false)\r\n    }, [postsLiked])\r\n\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        let post = {...props.post};\r\n        post.post_text = postText;\r\n\r\n        dispatch(updatePost(user.id, profile.id, post));\r\n\r\n        setEdit(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n\r\n            {\r\n                (\r\n                    props.post.profile_id === profile.id ||\r\n                    (currentProfile && currentProfile.id === profile.id)\r\n                )  &&\r\n                <span className=\"options-button\" onClick={() => setShowOptions(!showOptions)}>\r\n                    <i className=\"fas fa-ellipsis-h\"></i>\r\n                </span>\r\n            }\r\n\r\n            {showOptions && <ul className=\"options shadow card\">\r\n                <li onClick={() => {\r\n                    setEdit(true);\r\n                    setShowOptions(false);\r\n                }}>Edit <i className=\"fas fa-edit\"></i></li>\r\n                <li onClick={() => {\r\n                        dispatch(removePost(user.id, profile.id, props.post.id))\r\n                        setShowOptions(false);\r\n                    }\r\n                }>Delete <i className=\"fas fa-trash-alt\"></i></li>\r\n            </ul>}\r\n\r\n            <div className=\"card-body\">\r\n                <div className=\"posted-by\">\r\n                    <span className=\"post-user\" onClick={() => {\r\n                        dispatch(setCurrentProfileUsername(props.post.username))\r\n                        history.push(`/profile/${props.post.profile_id}`)\r\n                    }}>\r\n                        <img src=\"/assets/user.png\" className=\"img-fluid\" alt=\"Default User\"/> {props.post.username}\r\n                    </span> \r\n\r\n                    <span className=\"time-posted\"><Moment format=\"D MMMM YYYY hh:mm\">{props.post.created_at}</Moment></span>\r\n                </div>\r\n\r\n                {!edit && <p className=\"card-text\">\r\n                    {props.post.post_text}\r\n                </p>}\r\n\r\n                {edit && \r\n                    <form className=\"clearfix update-form\" onSubmit={onSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <textarea\r\n                                className=\"form-control\"\r\n                                rows={4}\r\n                                value={postText} \r\n                                onChange={e => setPostText(e.target.value)}\r\n                                required\r\n                            >\r\n                            </textarea>\r\n\r\n                            <div className=\"buttons float-end\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setEdit(false)}>Cancel</button>\r\n\r\n                                <button type=\"submit\" className=\"btn btn-primary\">Update</button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                }\r\n\r\n                <div className=\"post-icons\">\r\n                    <span>\r\n                        <span \r\n                            style={isLiked ? {color: 'var(--bs-primary)'} : {}} \r\n                            onClick={() => {\r\n                                if(!canClickLikeButton){\r\n                                    return;\r\n                                }\r\n\r\n                                if(!isLiked){\r\n                                    dispatch(likePost(user.id, profile.id, props.post.id));\r\n                                    setIsLiked(true);\r\n                                }else{\r\n                                    dispatch(unlikePost(user.id, profile.id, props.post.id));\r\n                                    setIsLiked(false);\r\n                                }\r\n                            }}\r\n                        >\r\n                            <i className=\"fas fa-thumbs-up\"></i> Like\r\n                        </span> \r\n                        <span className=\"badge bg-primary\">{props.post.likes}</span>\r\n                    </span>\r\n\r\n                    <span>\r\n                        <span onClick={() => {\r\n                            if(modalType !== \"\"){\r\n                                return;\r\n                            }\r\n\r\n                            dispatch(openModal(\"comment\"))\r\n                            dispatch(setIdToUseInModal(props.post.id));\r\n                            dispatch(setPostIndex(props.post_index));\r\n                        }}>\r\n                            <i className=\"far fa-comments\"></i> Comments\r\n                        </span> \r\n                        <span className=\"badge bg-primary\">{props.post.comments.length}</span>\r\n                    </span>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {showComments && <Comments comments={props.post.comments} post_index={props.post_index}/>}\r\n\r\n            {props.post.comments.length > 0 && <button \r\n                className=\"btn text-primary border border-primary show-comments\" \r\n                onClick={() => setShowComments(!showComments)}\r\n            >\r\n                {!showComments ? \"Show Comments +\" : \"Hide Comments -\"}\r\n            </button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\comment\\Comments.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\comment\\Comment.tsx",["192"],"import React, {useEffect, useState} from 'react'\r\nimport { Comment as CommentObj } from '../../../interfaces/post';\r\nimport Answers from '../answer/Answers'\r\nimport Moment from 'react-moment';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { State } from '../../../interfaces';\r\nimport { likeComment, removeComment, unlikeComment, updateComment } from '../../../actions/postActions';\r\nimport { openModal, setCommentIndex, setIdToUseInModal, setPostIndex } from '../../../actions/layoutActions';\r\n\r\nconst Comment = (props: {comment: CommentObj, post_index: number, comment_index: number}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user} = useSelector((state: State) => state.user)\r\n    const {profile} = useSelector((state: State) => state.profile)\r\n    const {commentsLiked, canClickLikeButton} = useSelector((state: State) => state.post)\r\n    const {modalType} = useSelector((state: State) => state.layout)\r\n\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [showAnswers, setShowAnswers] = useState(false);\r\n    const [commentText, setCommentText] = useState(props.comment.comment_text);\r\n    const [edit, setEdit] = useState(false)\r\n    const [isLiked, setIsLiked] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        setIsLiked(commentsLiked.findIndex(c => c.comment_id === props.comment.id) !== -1 ? true : false)\r\n    }, [commentsLiked])\r\n\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        let comment = {...props.comment};\r\n        comment.comment_text = commentText;\r\n\r\n        dispatch(updateComment(user.id, profile.id, comment, props.post_index));\r\n\r\n        setEdit(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card-body comment\">\r\n            {props.comment.profile_id === profile.id && <span className=\"options-button\" onClick={() => setShowOptions(!showOptions)}>\r\n                <i className=\"fas fa-ellipsis-h\"></i>\r\n            </span>}\r\n\r\n            {showOptions && <ul className=\"options shadow card\">\r\n                <li onClick={() => {\r\n                    setEdit(true);\r\n                    setShowOptions(false);\r\n                }}>Edit <i className=\"fas fa-edit\"></i></li>\r\n                <li onClick={() => {\r\n                        dispatch(removeComment(user.id, profile.id, props.comment.id, props.post_index))\r\n                        setShowOptions(false);\r\n                    }\r\n                }>Delete <i className=\"fas fa-trash-alt\"></i></li>\r\n            </ul>}\r\n\r\n            <div className=\"posted-by\">\r\n                <img src=\"/assets/user.png\" className=\"img-fluid\" alt=\"Default User\"/> {props.comment.username} \r\n                <span className=\"time-posted\"><Moment format=\"D MMMM YYYY hh:mm\">{props.comment.created_at}</Moment></span>\r\n            </div>\r\n\r\n            {!edit && <p className=\"card-text\">\r\n                {props.comment.comment_text}\r\n            </p>}\r\n\r\n            {edit && \r\n                <form className=\"clearfix update-form\" onSubmit={onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <textarea\r\n                            className=\"form-control\"\r\n                            rows={4}\r\n                            value={commentText} \r\n                            onChange={e => setCommentText(e.target.value)}\r\n                            required\r\n                        >\r\n                        </textarea>\r\n\r\n                        <div className=\"buttons float-end\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setEdit(false)}>Cancel</button>\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Update</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            }\r\n\r\n            <div className=\"post-icons\">\r\n                <span>\r\n                    <span \r\n                        style={isLiked ? {color: 'var(--bs-primary)'} : {}} \r\n                        onClick={() => {\r\n                            if(!canClickLikeButton){\r\n                                return;\r\n                            }\r\n\r\n                            if(!isLiked){\r\n                                dispatch(likeComment(user.id, profile.id, props.comment.id, props.post_index));\r\n                                setIsLiked(true);\r\n                            }else{\r\n                                dispatch(unlikeComment(user.id, profile.id, props.comment.id, props.post_index));\r\n                                setIsLiked(false);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <i className=\"fas fa-thumbs-up\"></i> Like\r\n                    </span> \r\n                    <span className=\"badge bg-primary\">{props.comment.likes}</span>\r\n                </span>\r\n\r\n                <span>\r\n                    <span onClick={() => {\r\n                            if(modalType !== \"\"){\r\n                                return;\r\n                            }\r\n\r\n                            dispatch(openModal(\"answer\"))\r\n                            dispatch(setIdToUseInModal(props.comment.id));\r\n                            dispatch(setPostIndex(props.post_index));\r\n                            dispatch(setCommentIndex(props.comment_index))\r\n                        }}>\r\n                        <i className=\"far fa-comments\"></i> Answers\r\n                    </span> \r\n                    <span className=\"badge bg-primary\">{props.comment.answers.length}</span>\r\n                </span>\r\n            </div>\r\n\r\n            {showAnswers && <Answers answers={props.comment.answers} comment_index={props.comment_index} post_index={props.post_index} />}\r\n\r\n            {props.comment.answers.length > 0 && <button \r\n                className=\"btn btn-outline-warning bg-white text-warning border border-warning show-answers\" \r\n                onClick={() => setShowAnswers(!showAnswers)}\r\n            >\r\n                {!showAnswers ? \"Show Answers +\" : \"Hide Answers -\"}\r\n            </button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\answer\\Answers.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\post\\answer\\Answer.tsx",["193"],"import React, { useEffect, useState } from 'react'\r\nimport { Answer as AnswerObj } from '../../../interfaces/post'\r\nimport Moment from 'react-moment'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { State } from '../../../interfaces';\r\nimport { likeAnswer, removeAnswer, unlikeAnswer, updateAnswer } from '../../../actions/postActions';\r\n\r\nconst Answer = (props: {answer: AnswerObj, post_index: number, comment_index: number}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user} = useSelector((state: State) => state.user)\r\n    const {profile} = useSelector((state: State) => state.profile)\r\n    const {answersLiked, canClickLikeButton} = useSelector((state: State) => state.post)\r\n\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [answerText, setAnswerText] = useState(props.answer.answer_text);\r\n    const [edit, setEdit] = useState(false)\r\n    const [isLiked, setIsLiked] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        setIsLiked(answersLiked.findIndex(a => a.answer_id === props.answer.id) !== -1 ? true : false)\r\n    }, [answersLiked])\r\n\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        let answer = {...props.answer};\r\n        answer.answer_text = answerText;\r\n\r\n        dispatch(updateAnswer(user.id, profile.id, answer, props.post_index, props.comment_index));\r\n\r\n        setEdit(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card-body answer\">\r\n            {props.answer.profile_id === profile.id && <span className=\"options-button\" onClick={() => setShowOptions(!showOptions)}>\r\n                <i className=\"fas fa-ellipsis-h\"></i>\r\n            </span>}\r\n\r\n            {showOptions && <ul className=\"options shadow card\">\r\n                <li onClick={() => {\r\n                    setEdit(true);\r\n                    setShowOptions(false);\r\n                }}>Edit <i className=\"fas fa-edit\"></i></li>\r\n                <li onClick={() => {\r\n                        dispatch(removeAnswer(user.id, profile.id, props.answer.id, props.post_index, props.comment_index))\r\n                        setShowOptions(false);\r\n                    }\r\n                }>Delete <i className=\"fas fa-trash-alt\"></i></li>\r\n            </ul>}\r\n\r\n            <div className=\"posted-by\">\r\n                <img src=\"/assets/user.png\" className=\"img-fluid\" alt=\"Default User\"/> {props.answer.username} \r\n                <span className=\"time-posted\"><Moment format=\"D MMMM YYYY hh:mm\">{props.answer.created_at}</Moment></span>\r\n            </div>\r\n\r\n            {!edit && <p className=\"card-text\">\r\n                {props.answer.answer_text}\r\n            </p>}\r\n\r\n            {edit && \r\n                <form className=\"clearfix update-form\" onSubmit={onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <textarea\r\n                            className=\"form-control\"\r\n                            rows={4}\r\n                            value={answerText} \r\n                            onChange={e => setAnswerText(e.target.value)}\r\n                            required\r\n                        >\r\n                        </textarea>\r\n\r\n                        <div className=\"buttons float-end\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setEdit(false)}>Cancel</button>\r\n\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Update</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            }\r\n\r\n            <div className=\"post-icons\">\r\n                <span>\r\n                    <span\r\n                        style={isLiked ? {color: 'var(--bs-primary)'} : {}} \r\n                        onClick={() => {\r\n                            if(!canClickLikeButton){\r\n                                return;\r\n                            }\r\n\r\n                            if(!isLiked){\r\n                                dispatch(likeAnswer(user.id, profile.id, props.answer.id, props.post_index, props.comment_index));\r\n                                setIsLiked(true);\r\n                            }else{\r\n                                dispatch(unlikeAnswer(user.id, profile.id, props.answer.id, props.post_index, props.comment_index));\r\n                                setIsLiked(false);\r\n                            }\r\n                        }}\r\n                    >\r\n                        <i className=\"fas fa-thumbs-up\"></i> Like\r\n                    </span> \r\n                    <span className=\"badge bg-primary\">{props.answer.likes}</span>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Answer\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreatePost.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\profileReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\profileActionTypes.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\profileActions.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\reducers\\postReducer.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actionTypes\\postActionTypes.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\actions\\postActions.ts",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreateComment.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\CreateAnswer.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\modals\\SearchProfile.tsx",["194"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { clearMatches, findUsernameMatches, getSearchingResults } from '../../actions/profileActions';\r\nimport { State } from '../../interfaces';\r\n\r\nconst SearchProfile = (props: {setShowSearchProfile: Function}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user} = useSelector((state: State) => state.user);\r\n    const {searchMatches, profile} = useSelector((state: State) => state.profile);\r\n\r\n    const [searchedProfileUsername, setSearchedProfileUsername] = useState(\"\");\r\n    const [matches, setMatches] = useState([] as RegExpMatchArray[])\r\n\r\n    const handleSearchChanged = (search=searchedProfileUsername) => {\r\n        let regex = new RegExp(`^${search}`, 'i');\r\n\r\n        let currentMatches = [] as RegExpMatchArray[];\r\n\r\n        for(let i = 0; i < searchMatches.length; i++){\r\n            let match = searchMatches[i].username.match(regex);\r\n            if(match){\r\n                currentMatches.push(match!)\r\n            }\r\n        }\r\n\r\n        setMatches(currentMatches);\r\n    }\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if(searchedProfileUsername === \"\"){\r\n            dispatch(findUsernameMatches(user.id, profile.id, e.target.value[0]));\r\n        }\r\n\r\n        if(searchedProfileUsername !== \"\" && e.target.value === \"\"){\r\n            dispatch(clearMatches())\r\n        }\r\n\r\n        setSearchedProfileUsername(e.target.value)\r\n\r\n        if(searchMatches.length !== 0){\r\n            handleSearchChanged(e.target.value);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        dispatch(getSearchingResults(user.id, profile.id, searchedProfileUsername));\r\n\r\n        props.setShowSearchProfile(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleSearchChanged();\r\n    }, [searchMatches])\r\n\r\n    return (\r\n        <div className=\"search-profile-container\">\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"input-group\">\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Search profile...\" \r\n                        value={searchedProfileUsername}\r\n                        onChange={handleChange}\r\n                    />\r\n\r\n                    <button type=\"submit\">\r\n                        <i className=\"fas fa-search\"></i>\r\n                    </button>\r\n\r\n                    <span onClick={() => props.setShowSearchProfile(false)}>&#x2715;</span>\r\n\r\n                    <ul className=\"autocomplete\">\r\n                        {\r\n                            matches.map((match, i) => (\r\n                                <li \r\n                                    key={i} \r\n                                    onClick={() => {\r\n                                        setSearchedProfileUsername(searchedProfileUsername + match.input!.slice(searchedProfileUsername.length))\r\n                                        setMatches([])\r\n                                    }}\r\n                                >\r\n                                    {searchedProfileUsername}\r\n                                    <span>{match.input!.slice(searchedProfileUsername.length)}</span>\r\n                                </li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchProfile\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\Profile.tsx",["195","196"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Posts from '../post/Posts'\r\nimport {State} from '../../interfaces'\r\nimport { fetchCurrentProfile, fetchCurrentProfilePosts, updateProfileDescription } from '../../actions/profileActions'\r\nimport CreateComment from '../modals/CreateComment'\r\nimport CreateAnswer from '../modals/CreateAnswer'\r\nimport CreatePost from '../modals/CreatePost'\r\nimport { openModal } from '../../actions/layoutActions'\r\nimport RequestButton from './RequestButton'\r\n\r\nconst Profile = () => {\r\n    const dispatch = useDispatch();\r\n    const {user} = useSelector((state:State) => state.user)\r\n    const {loading} = useSelector((state: State) => state.post);\r\n    const { profile, currentProfile } = useSelector((state:State) => state.profile)\r\n\r\n    const {showModal, modalType} = useSelector((state:State) => state.layout) \r\n\r\n    const isCurrentProfile = profile.id === currentProfile.id;\r\n\r\n    const [description, setDescription] = useState(currentProfile.profile_description);\r\n    const [editProfile, setEditProfile] = useState(false);\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        dispatch(updateProfileDescription(user.id, profile.id, description));\r\n\r\n        setEditProfile(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let href = window.location.href.split(\"/\");\r\n        let profileId = parseInt(href[href.length - 1]);\r\n\r\n        dispatch(fetchCurrentProfile(user.id, profile.id, profileId));\r\n        dispatch(fetchCurrentProfilePosts(user.id, profile.id, profileId));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setDescription(currentProfile.profile_description);\r\n    }, [currentProfile.id])\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n            {loading && <div className=\"d-flex justify-content-center align-items-center loading pt-4\">\r\n                <div className=\"spinner-border\" role=\"status\">\r\n                </div>\r\n                <span>Loading...</span>\r\n            </div>}\r\n\r\n            {!loading && <div className=\"container\">\r\n                <div className=\"profile-header d-flex justify-content-center align-items-center\">\r\n                    <div className=\"profile-header-top\">\r\n                        <div className=\"d-flex justify-content-center align-items-center\">\r\n                            <img src={currentProfile.profile_image} alt=\"User Default\"/>\r\n\r\n                            <div className=\"profile-details d-flex flex-column justify-content-center\">\r\n                                <span><strong>{isCurrentProfile ? user.username : currentProfile.username}</strong></span>\r\n                                <span>712 Friends</span>\r\n                                <span>32 Posts</span>\r\n\r\n                                {\r\n                                    isCurrentProfile &&\r\n                                    <button \r\n                                        className=\"btn btn-primary mb-3\"\r\n                                        onClick={() => {\r\n                                            dispatch(openModal(\"post\"))\r\n                                        }}\r\n                                    >\r\n                                        Create Post +\r\n                                    </button>\r\n                                }\r\n\r\n                                {\r\n                                    isCurrentProfile &&\r\n                                    <span onClick={() => setEditProfile(!editProfile)}>Edit <i className=\"fas fa-edit\"></i></span>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"description\">\r\n                            {(!editProfile || !isCurrentProfile) && <p>\r\n                                {description}\r\n                            </p>}\r\n\r\n                            {editProfile && isCurrentProfile && <form onSubmit={handleSubmit}>\r\n                                <textarea \r\n                                    value={description} \r\n                                    onChange={e => setDescription(e.target.value)} \r\n                                    className=\"form-control\" \r\n                                    rows={4}\r\n                                ></textarea>\r\n\r\n                                <button type=\"submit\" className=\"btn btn-primary\">Update</button>\r\n                                <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setEditProfile(false)}>Cancel</button>\r\n                            </form>}\r\n                        </div>\r\n\r\n                        {!isCurrentProfile && \r\n                            <RequestButton profileId={currentProfile.id} />\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <Posts/>\r\n\r\n                {showModal && modalType === \"post\" && <CreatePost/>}\r\n\r\n                {showModal && modalType === \"comment\" && <CreateComment/>}\r\n\r\n                {showModal && modalType === \"answer\" && <CreateAnswer/>}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\SearchedProfileResults.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\SearchResult.tsx",[],"C:\\Users\\Windows\\Desktop\\Youtube Tutorials\\Social Media App\\client\\src\\components\\profile\\RequestButton.tsx",["197"],"import React, {useState, useEffect} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { acceptFriendRequest, cancelFriendRequest, removeFriend, sendFriendRequest } from '../../actions/profileActions';\r\nimport { State } from '../../interfaces';\r\n\r\nconst RequestButton = (props: {profileId: number}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const {user} = useSelector((state: State) => state.user);\r\n    const {friends, friendRequests, sendedFriendRequests, canClickRequestButton, profile} = useSelector((state: State) => state.profile);\r\n\r\n    let friend = friends.find(friend => friend.friend_profile_id === props.profileId);\r\n\r\n    const [requestSended, setRequestSended] = \r\n        useState(sendedFriendRequests.find(request => request.receiver_profile_id === props.profileId) ? true : false);\r\n\r\n    const [isFriend, setIsFriend] = useState(friend ? true : false)\r\n    const [friendshipId, setFriendshipId] = useState(isFriend && friend ? friend.id : 0)\r\n    const [hasRequestFromThisProfile, setHasRequestFromThisProfile] =\r\n        useState(friendRequests.find(request => request.sender_profile_id === props.profileId) ? true : false)\r\n\r\n    useEffect(() => {\r\n        let friend = friends.find(friend => friend.friend_profile_id === props.profileId);\r\n        setIsFriend(friend ? true : false)\r\n        setFriendshipId(friend ? friend.id : 0)\r\n\r\n        setHasRequestFromThisProfile(\r\n            friend ? false : friendRequests.find(request => request.sender_profile_id === props.profileId) ? true : false\r\n        );\r\n    }, [friends])\r\n\r\n    return (\r\n        <button\r\n            className={\r\n                (isFriend || requestSended) ?\r\n                \"btn btn-danger\" : \r\n                hasRequestFromThisProfile ? \r\n                \"btn btn-success\" :\r\n                \"btn btn-primary\"\r\n            }\r\n            disabled={!canClickRequestButton}\r\n            onClick={() => {\r\n                if(!canClickRequestButton){\r\n                    return;\r\n                }\r\n\r\n                if(isFriend){\r\n                    dispatch(removeFriend(user.id, profile.id, friendshipId));\r\n                }else{\r\n                    if(hasRequestFromThisProfile){\r\n                        dispatch(acceptFriendRequest(user.id, profile.id, props.profileId));\r\n                    }else{\r\n                        if(!requestSended){\r\n                            dispatch(sendFriendRequest(user.id, profile.id, props.profileId))\r\n                            setRequestSended(true);\r\n                        }else{\r\n                            dispatch(cancelFriendRequest(user.id, profile.id, props.profileId))\r\n                            setRequestSended(false);\r\n                        }\r\n                    }\r\n                }\r\n            }}\r\n        >\r\n            {\r\n                isFriend ? \"Remove Friend\" \r\n                : hasRequestFromThisProfile ?\r\n                \"Accept Friend Request\" :\r\n                requestSended ? \"Cancel Friend Request\" :\r\n                \"Send Friend Request\"\r\n            }\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default RequestButton\r\n",{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":15,"column":6,"nodeType":"204","endLine":15,"endColumn":8,"suggestions":"205"},{"ruleId":"198","replacedBy":"206"},{"ruleId":"200","replacedBy":"207"},{"ruleId":"202","severity":1,"message":"208","line":18,"column":8,"nodeType":"204","endLine":18,"endColumn":25,"suggestions":"209"},{"ruleId":"202","severity":1,"message":"203","line":26,"column":8,"nodeType":"204","endLine":26,"endColumn":10,"suggestions":"210"},{"ruleId":"202","severity":1,"message":"211","line":37,"column":8,"nodeType":"204","endLine":37,"endColumn":27,"suggestions":"212"},{"ruleId":"213","severity":1,"message":"214","line":10,"column":10,"nodeType":"215","messageId":"216","endLine":10,"endColumn":29},{"ruleId":"202","severity":1,"message":"217","line":30,"column":8,"nodeType":"204","endLine":30,"endColumn":20,"suggestions":"218"},{"ruleId":"202","severity":1,"message":"219","line":26,"column":8,"nodeType":"204","endLine":26,"endColumn":23,"suggestions":"220"},{"ruleId":"202","severity":1,"message":"221","line":22,"column":8,"nodeType":"204","endLine":22,"endColumn":22,"suggestions":"222"},{"ruleId":"202","severity":1,"message":"223","line":56,"column":8,"nodeType":"204","endLine":56,"endColumn":23,"suggestions":"224"},{"ruleId":"202","severity":1,"message":"225","line":39,"column":8,"nodeType":"204","endLine":39,"endColumn":10,"suggestions":"226"},{"ruleId":"202","severity":1,"message":"227","line":43,"column":8,"nodeType":"204","endLine":43,"endColumn":27,"suggestions":"228"},{"ruleId":"202","severity":1,"message":"229","line":30,"column":8,"nodeType":"204","endLine":30,"endColumn":17,"suggestions":"230"},"no-native-reassign",["231"],"no-negated-in-lhs",["232"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'user.id'. Either include them or remove the dependency array.","ArrayExpression",["233"],["231"],["232"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["234"],["235"],"React Hook useEffect has a missing dependency: 'user.id'. Either include it or remove the dependency array.",["236"],"@typescript-eslint/no-unused-vars","'fetchCurrentProfile' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'props.post.id'. Either include it or remove the dependency array. If 'setIsLiked' needs the current value of 'props.post.id', you can also switch to useReducer instead of useState and read 'props.post.id' in the reducer.",["237"],"React Hook useEffect has a missing dependency: 'props.comment.id'. Either include it or remove the dependency array. If 'setIsLiked' needs the current value of 'props.comment.id', you can also switch to useReducer instead of useState and read 'props.comment.id' in the reducer.",["238"],"React Hook useEffect has a missing dependency: 'props.answer.id'. Either include it or remove the dependency array. If 'setIsLiked' needs the current value of 'props.answer.id', you can also switch to useReducer instead of useState and read 'props.answer.id' in the reducer.",["239"],"React Hook useEffect has a missing dependency: 'handleSearchChanged'. Either include it or remove the dependency array.",["240"],"React Hook useEffect has missing dependencies: 'dispatch', 'profile.id', and 'user.id'. Either include them or remove the dependency array.",["241"],"React Hook useEffect has a missing dependency: 'currentProfile.profile_description'. Either include it or remove the dependency array.",["242"],"React Hook useEffect has missing dependencies: 'friendRequests' and 'props.profileId'. Either include them or remove the dependency array. If 'setHasRequestFromThisProfile' needs the current value of 'props.profileId', you can also switch to useReducer instead of useState and read 'props.profileId' in the reducer.",["243"],"no-global-assign","no-unsafe-negation",{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"244","fix":"248"},{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},"Update the dependencies array to be: [dispatch, user.id]",{"range":"265","text":"266"},"Update the dependencies array to be: [history, isAuthenticated]",{"range":"267","text":"268"},{"range":"269","text":"266"},"Update the dependencies array to be: [profile, dispatch, user.id]",{"range":"270","text":"271"},"Update the dependencies array to be: [postsLiked, props.post.id]",{"range":"272","text":"273"},"Update the dependencies array to be: [commentsLiked, props.comment.id]",{"range":"274","text":"275"},"Update the dependencies array to be: [answersLiked, props.answer.id]",{"range":"276","text":"277"},"Update the dependencies array to be: [handleSearchChanged, searchMatches]",{"range":"278","text":"279"},"Update the dependencies array to be: [dispatch, profile.id, user.id]",{"range":"280","text":"281"},"Update the dependencies array to be: [currentProfile.id, currentProfile.profile_description]",{"range":"282","text":"283"},"Update the dependencies array to be: [friendRequests, friends, props.profileId]",{"range":"284","text":"285"},[495,497],"[dispatch, user.id]",[598,615],"[history, isAuthenticated]",[1287,1289],[1729,1748],"[profile, dispatch, user.id]",[1526,1538],"[postsLiked, props.post.id]",[1384,1399],"[commentsLiked, props.comment.id]",[1086,1100],"[answersLiked, props.answer.id]",[1919,1934],"[handleSearchChanged, searchMatches]",[1647,1649],"[dispatch, profile.id, user.id]",[1745,1764],"[currentProfile.id, currentProfile.profile_description]",[1571,1580],"[friendRequests, friends, props.profileId]"]